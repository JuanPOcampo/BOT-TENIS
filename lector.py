# ‚Äî‚Äî‚Äî Librer√≠as est√°ndar de Python ‚Äî‚Äî‚Äî
import os
import io
import re
import json
import base64
import logging
import random
import string
import requests
import asyncio
import difflib
import unicodedata
import subprocess
import time
from datetime import datetime, timedelta
from collections import defaultdict
from types import SimpleNamespace

# ‚Äî‚Äî‚Äî Librer√≠as externas ‚Äî‚Äî‚Äî
import numpy as np               # ‚Üê  d√©jalo si realmente lo usas
import torch
import nest_asyncio
from PIL import Image
from dotenv import load_dotenv
from transformers import CLIPModel, CLIPProcessor
from torchvision import transforms
from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from openai import AsyncOpenAI
import gspread
from google.oauth2 import service_account     # ‚Üê alias de antes

# ‚Äî‚Äî‚Äî Google Cloud & Drive ‚Äî‚Äî‚Äî
from google.cloud import vision
from google.oauth2.service_account import Credentials   # forma √∫nica
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# ‚Äî‚Äî‚Äî Telegram ‚Äî‚Äî‚Äî
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto,
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
# ‚îÄ‚îÄ‚îÄ Imports y logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import os, io, logging
from fastapi import FastAPI
from googleapiclient.http import MediaIoBaseDownload

logging.basicConfig(level=logging.INFO,
                    format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ Instancia de FastAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
api = FastAPI(title="AYA Bot ‚Äì WhatsApp")
logging.basicConfig(level=logging.DEBUG)

# ‚îÄ‚îÄ‚îÄ (Ejemplo) servicio de Drive  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_drive_service():
    """
    Devuelve un objeto service autenticado para la API de Drive.
    Ajusta seg√∫n tu implementaci√≥n real.
    """
    from google.oauth2.service_account import Credentials
    from googleapiclient.discovery import build

    creds = Credentials.from_service_account_file(
        "service_account.json",
        scopes=["https://www.googleapis.com/auth/drive.readonly"]
    )
    return build("drive", "v3", credentials=creds)
# ‚îÄ‚îÄ‚îÄ Descarga del video de confianza desde Drive ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARPETA_VIDEO_CONFIANZA_DRIVE = "1uX0FXruTXLr2c5SHAc6thlIUMucN1hAA"  # Carpeta 'Video de confianza'

def descargar_video_confianza():
    """
    Descarga el archivo .mp4 desde la carpeta 'Video de confianza' en Google Drive.
    Guarda el archivo en /var/data/videos/video_confianza.mp4 si a√∫n no existe.
    """
    try:
        print(">>> descargar_video_confianza() ‚Äì iniciando")
        service = get_drive_service()
        os.makedirs("/var/data/videos", exist_ok=True)

        logging.info("üìÇ [Video Confianza] Iniciando descarga desde Drive‚Ä¶")
        logging.info(f"üÜî Carpeta Drive: {CARPETA_VIDEO_CONFIANZA_DRIVE}")

        # Buscar archivo .mp4 en la carpeta
        archivos = service.files().list(
            q=f"'{CARPETA_VIDEO_CONFIANZA_DRIVE}' in parents and mimeType='video/mp4' and trashed = false",
            fields="files(id, name)",
            pageSize=1
        ).execute().get("files", [])

        if not archivos:
            logging.warning("‚ö†Ô∏è No se encontr√≥ ning√∫n video .mp4 en la carpeta de confianza.")
            return

        archivo = archivos[0]
        nombre_archivo = "video_confianza.mp4"
        ruta_destino = os.path.join("/var/data/videos", nombre_archivo)

        if os.path.exists(ruta_destino):
            logging.info(f"üì¶ Ya existe: {nombre_archivo} ‚Äî se omite descarga.")
            return

        logging.info(f"‚¨áÔ∏è Descargando video: {nombre_archivo}")
        request = service.files().get_media(fileId=archivo["id"])
        buffer = io.BytesIO()
        downloader = MediaIoBaseDownload(buffer, request)

        done = False
        while not done:
            _, done = downloader.next_chunk()

        with open(ruta_destino, "wb") as f:
            f.write(buffer.getvalue())

        logging.info(f"‚úÖ Video guardado: {ruta_destino}")
        print(">>> descargar_video_confianza() ‚Äì finalizado")

    except Exception as e:
        print(">>> EXCEPCI√ìN en descargar_video_confianza:", e)
        logging.error(f"‚ùå Error descargando video de confianza: {e}")

# ‚îÄ‚îÄ‚îÄ Descarga de stickers organizados por subcarpetas ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARPETA_STICKERS_DRIVE = "1mYpTq98rli3_hTXzvfCj6CgcGhrYZwCh"  # Carpeta 'Stickers'

def descargar_stickers_drive():
    """
    Descarga stickers desde subcarpetas de 'Stickers' en Google Drive.
    Cada subcarpeta (ej: 'Sticker bienvenida') se guarda como prefijo del nombre del archivo.
    Ejemplo: 'Sticker bienvenida/sticker1.webp' ‚Üí /var/data/stickers/sticker_bienvenida_sticker1.webp
    """
    try:
        print(">>> descargar_stickers_drive() ‚Äì iniciando")
        service = get_drive_service()
        os.makedirs("/var/data/stickers", exist_ok=True)

        logging.info("üìÇ [Stickers] Descargando desde subcarpetas tem√°ticas‚Ä¶")
        logging.info(f"üÜî Carpeta ra√≠z: {CARPETA_STICKERS_DRIVE}")

        # Buscar subcarpetas dentro de la carpeta 'Stickers'
        subcarpetas = service.files().list(
            q=f"'{CARPETA_STICKERS_DRIVE}' in parents and mimeType='application/vnd.google-apps.folder' and trashed = false",
            fields="files(id, name)"
        ).execute().get("files", [])

        for sub in subcarpetas:
            nombre_subcarpeta = sub["name"].lower().replace(" ", "_")  # Ej: 'Sticker bienvenida' ‚Üí 'sticker_bienvenida'
            id_subcarpeta = sub["id"]

            logging.info(f"üîé Buscando en subcarpeta: {nombre_subcarpeta}")

            archivos = service.files().list(
                q=f"'{id_subcarpeta}' in parents and mimeType='image/webp' and trashed = false",
                fields="files(id, name)"
            ).execute().get("files", [])

            for archivo in archivos:
                nombre_archivo_original = archivo["name"]
                nombre_archivo_local = f"{nombre_subcarpeta}_{nombre_archivo_original}"
                ruta_destino = os.path.join("/var/data/stickers", nombre_archivo_local)

                if os.path.exists(ruta_destino):
                    logging.info(f"üì¶ Ya existe: {nombre_archivo_local} ‚Äî omitiendo descarga.")
                    continue

                logging.info(f"‚¨áÔ∏è Descargando sticker: {nombre_archivo_local}")
                request = service.files().get_media(fileId=archivo["id"])
                buffer = io.BytesIO()
                downloader = MediaIoBaseDownload(buffer, request)

                done = False
                while not done:
                    _, done = downloader.next_chunk()

                with open(ruta_destino, "wb") as f:
                    f.write(buffer.getvalue())

                logging.info(f"‚úÖ Guardado: {ruta_destino}")

        logging.info("üéâ Stickers descargados con √©xito.")
        print(">>> descargar_stickers_drive() ‚Äì finalizado")

    except Exception as e:
        print(">>> EXCEPCI√ìN en descargar_stickers_drive:", e)
        logging.error(f"‚ùå Error al descargar stickers: {e}")


# ‚îÄ‚îÄ‚îÄ Descarga de im√°genes de cat√°logo desde Drive ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARPETA_CATALOGO_DRIVE = "1_liZvzlyNj2P8koFU4fgFp5X8icUh_ZA"  # Carpeta principal

def descargar_imagenes_catalogo():
    """
    Descarga una imagen por subcarpeta de la carpeta 'Envio de Imagenes Catalogo'.
    Guarda las im√°genes en /var/data/modelos_video/. No repite si ya existen.
    """
    try:
        print(">>> descargar_imagenes_catalogo() ‚Äì iniciando")
        service = get_drive_service()
        os.makedirs("/var/data/modelos_video", exist_ok=True)

        logging.info("üìÇ [Modelos Cat√°logo] Descargando im√°genes desde Drive‚Ä¶")
        logging.info(f"üÜî Carpeta ra√≠z: {CARPETA_CATALOGO_DRIVE}")

        # Obtener todas las subcarpetas (cada modelo-color)
        subcarpetas = service.files().list(
            q=f"'{CARPETA_CATALOGO_DRIVE}' in parents and mimeType='application/vnd.google-apps.folder' and trashed = false",
            fields="files(id, name)"
        ).execute().get("files", [])

        for carpeta in subcarpetas:
            nombre_carpeta = carpeta["name"]
            id_carpeta = carpeta["id"]

            logging.info(f"üîé Buscando imagen en subcarpeta: {nombre_carpeta}")

            # Buscar una imagen dentro de la subcarpeta
            archivos = service.files().list(
                q=f"'{id_carpeta}' in parents and mimeType contains 'image/' and trashed = false",
                fields="files(id, name)",
                pageSize=1
            ).execute().get("files", [])

            if not archivos:
                logging.warning(f"‚ö†Ô∏è Sin im√°genes en {nombre_carpeta}")
                continue

            imagen = archivos[0]
            nombre_archivo = f"{nombre_carpeta}.jpg"
            ruta_destino = os.path.join("/var/data/modelos_video", nombre_archivo)

            if os.path.exists(ruta_destino):
                logging.info(f"üì¶ Ya existe: {nombre_archivo} ‚Äî omitiendo descarga.")
                continue

            logging.info(f"‚¨áÔ∏è Descargando imagen: {nombre_archivo}")
            request = service.files().get_media(fileId=imagen["id"])
            buffer = io.BytesIO()
            downloader = MediaIoBaseDownload(buffer, request)

            done = False
            while not done:
                _, done = downloader.next_chunk()

            with open(ruta_destino, "wb") as f:
                f.write(buffer.getvalue())

            logging.info(f"‚úÖ Imagen guardada: {ruta_destino}")

        logging.info("üéâ Descarga de im√°genes de cat√°logo completada.")
        print(">>> descargar_imagenes_catalogo() ‚Äì finalizado")

    except Exception as e:
        print(">>> EXCEPCI√ìN en descargar_imagenes_catalogo:", e)
        logging.error(f"‚ùå Error descargando im√°genes de cat√°logo: {e}")

# ‚îÄ‚îÄ‚îÄ Descarga de videos desde Drive ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARPETA_VIDEOS_DRIVE = "1bFJAuuW8JYWDMT74bGqQC6qBynZ_olBU"   # ‚¨ÖÔ∏è tu carpeta

def descargar_videos_drive():
    """
    Descarga todos los .mp4 de la carpeta de Drive a /var/data/videos.
    Solo baja los que a√∫n no existan. Deja trazas en logs y prints.
    """
    try:
        print(">>> descargar_videos_drive() ‚Äì¬†iniciando")
        service = get_drive_service()
        os.makedirs("/var/data/videos", exist_ok=True)

        logging.info("üìÇ [Videos] Iniciando descarga desde Drive‚Ä¶")
        logging.info(f"üÜî Carpeta Drive: {CARPETA_VIDEOS_DRIVE}")

        resultados = service.files().list(
            q=f"'{CARPETA_VIDEOS_DRIVE}' in parents and mimeType='video/mp4'",
            fields="files(id, name, mimeType)"
        ).execute()

        archivos = resultados.get("files", [])
        logging.info(f"üîé {len(archivos)} archivo(s) .mp4 encontrados en la carpeta.")
        print(">>> Encontrados en Drive:", [f['name'] for f in archivos])

        for archivo in archivos:
            nombre = archivo["name"]
            id_video = archivo["id"]
            ruta_destino = os.path.join("/var/data/videos", nombre)

            if os.path.exists(ruta_destino):
                logging.info(f"üì¶ Ya existe: {nombre} ‚Äî se omite descarga.")
                continue

            logging.info(f"‚¨áÔ∏è Descargando {nombre}‚Ä¶")
            request = service.files().get_media(fileId=id_video)
            buffer = io.BytesIO()
            downloader = MediaIoBaseDownload(buffer, request)

            done = False
            while not done:
                _, done = downloader.next_chunk()

            with open(ruta_destino, "wb") as f:
                f.write(buffer.getvalue())

            logging.info(f"‚úÖ Guardado en {ruta_destino}")

        logging.info("üéâ Descarga de videos completada.")
        print(">>> descargar_videos_drive() ‚Äì¬†finalizado")

    except Exception as e:
        print(">>> EXCEPCI√ìN en descargar_videos_drive:", e)
        logging.error(f"‚ùå Error descargando videos desde Drive: {e}")

# ‚îÄ‚îÄ‚îÄ Hook de arranque de FastAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@api.on_event("startup")
async def startup_download_videos():
    descargar_videos_drive()

# ‚îÄ‚îÄ‚îÄ Resto de tu c√≥digo (rutas, responder(), etc.) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚Ä¶

# üß† Anti-duplicados por mensaje ID
ultimo_msg = {}

# ID del archivo clientes.json en Google Drive
CLIENTES_JSON_FILE_ID = "13euT2mtVwO4qWjhiWNAo-0DZFPTmjy0X"
DURACION_MEMORIA_DIAS = 30

def get_drive_service():
    creds_json = os.getenv("GOOGLE_CREDS_JSON")
    creds_dict = json.loads(creds_json)
    creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=["https://www.googleapis.com/auth/drive"])
    return build("drive", "v3", credentials=creds)

def descargar_memoria_clientes():
    service = get_drive_service()
    request = service.files().get_media(fileId=CLIENTES_JSON_FILE_ID)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)

    done = False
    while not done:
        status, done = downloader.next_chunk()

    fh.seek(0)
    try:
        memoria = json.load(fh)
    except json.JSONDecodeError:
        memoria = {}

    return memoria

def subir_memoria_clientes(memoria_dict):
    service = get_drive_service()

    # üîÅ Primero escribe el JSON como texto
    str_io = io.StringIO()
    json.dump(memoria_dict, str_io, ensure_ascii=False, indent=4)
    str_io.seek(0)

    # üîÅ Luego lo conviertes a bytes
    byte_io = io.BytesIO(str_io.read().encode("utf-8"))
    byte_io.seek(0)

    media_body = MediaIoBaseUpload(byte_io, mimetype='application/json', resumable=True)

    service.files().update(
        fileId=CLIENTES_JSON_FILE_ID,
        media_body=media_body
    ).execute()


def limpiar_memoria_vencida(memoria):
    ahora = datetime.now()
    nueva_memoria = {}
    for numero, datos in memoria.items():
        fecha = datetime.fromisoformat(datos.get("fecha", "2000-01-01"))
        if ahora - fecha <= timedelta(days=DURACION_MEMORIA_DIAS):
            nueva_memoria[numero] = datos
    return nueva_memoria

def actualizar_cliente(numero, nuevos_datos):
    memoria = descargar_memoria_clientes()
    memoria = limpiar_memoria_vencida(memoria)
    cliente = memoria.get(numero, {})
    cliente.update(nuevos_datos)
    cliente["fecha"] = datetime.now().isoformat()
    memoria[numero] = cliente
    subir_memoria_clientes(memoria)

def obtener_datos_cliente(numero):
    memoria = descargar_memoria_clientes()
    memoria = limpiar_memoria_vencida(memoria)
    return memoria.get(numero)

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def generar_audio_openai(texto: str,
                               nombre_archivo: str = "respuesta.mp3",
                               voice: str = "nova") -> str | None:
    try:
        logging.debug("üîß generar_audio_openai() inicia‚Ä¶")
        os.makedirs("temp", exist_ok=True)
        ruta = os.path.join("temp", nombre_archivo)

        # 1Ô∏è‚É£  Solicitud TTS
        resp = await client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=texto
        )

        # 2Ô∏è‚É£  Obtener los bytes seg√∫n el m√©todo disponible
        if hasattr(resp, "aread"):                       # SDK async v1
            audio_bytes = await resp.aread()
        elif callable(getattr(resp, "read", None)):      # SDK sync v1 (pero obj devuelto aqu√≠)
            audio_bytes = resp.read()
        else:                                            # Fallback
            audio_bytes = resp  # asume bytes directos

        # 3Ô∏è‚É£  Guardar
        with open(ruta, "wb") as f:
            f.write(audio_bytes)

        logging.info(f"‚úÖ Audio guardado: {ruta}")
        return ruta

    except Exception as e:
        logging.error(f"‚ùå Error generando audio: {e}")
        return None




# CLIP: cargar modelo una sola vez
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_model.eval()
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# Inicializa dotenv
load_dotenv()

# FastAPI instance
api = FastAPI()

from fastapi.responses import JSONResponse

@api.get("/ver_embeddings")
async def ver_embeddings():
    try:
        with open("var/data/embeddings.json", "r") as f:
            data = json.load(f)

        if not isinstance(data, dict):
            return {"error": "Estructura inv√°lida en embeddings.json"}

        resumen = {
            nombre: len(v) if isinstance(v, list) else 0
            for nombre, v in data.items()
        }

        return {
            "total_modelos": len(resumen),
            "modelos": resumen  # ejemplo: {"DS_277_NEGRO": 4, "SUPER_BLANCO": 3}
        }

    except Exception as e:
        logging.error(f"[EMBEDDINGS] Error al leer embeddings.json: {e}")
        return {"error": str(e)}

# ‚úÖ Desde el mismo JSON base
creds_info = json.loads(os.environ["GOOGLE_CREDS_JSON"])

# DRIVE ‚Üí requiere scope expl√≠cito
drive_creds = service_account.Credentials.from_service_account_info(
    creds_info,
    scopes=["https://www.googleapis.com/auth/drive.readonly"]
)

# VISION ‚Üí no requiere scope personalizado
vision_creds = service_account.Credentials.from_service_account_info(creds_info)

# Servicios
drive_service = build("drive", "v3", credentials=drive_creds)
vision_client = vision.ImageAnnotatorClient(credentials=vision_creds)
# üñºÔ∏è Convertir base64 a imagen PIL
def decodificar_imagen_base64(base64_str: str) -> Image.Image:
    data = base64.b64decode(base64_str + "===")
    return Image.open(io.BytesIO(data)).convert("RGB")

# üß† Embedding de imagen con CLIP (local, sin OpenAI)
def generar_embedding_imagen(img: Image.Image) -> np.ndarray:
    inputs = clip_processor(images=img, return_tensors="pt")
    with torch.no_grad():
        vec = clip_model.get_image_features(**inputs)[0]
    return vec.cpu().numpy()  # ‚Üí ndarray de shape (512,)
import torch
import torch.nn.functional as F

# üîç Comparar embedding de la imagen con los embeddings precargados
def comparar_embeddings_clip(embedding_cliente: np.ndarray, embeddings_dict: dict):
    import torch.nn.functional as F
    embedding_cliente = torch.tensor(embedding_cliente)
    embedding_cliente = F.normalize(embedding_cliente, dim=-1)

    mejores = []

    for nombre_modelo, lista_vecs in embeddings_dict.items():
        try:
            max_sim = 0.0
            for vec in lista_vecs:
                emb_modelo = torch.tensor(vec)
                emb_modelo = F.normalize(emb_modelo, dim=-1)
                sim = torch.dot(embedding_cliente, emb_modelo).item()
                if sim > max_sim:
                    max_sim = sim
            mejores.append((nombre_modelo, max_sim))
        except Exception as e:
            print(f"[ERROR EMBEDDING] {nombre_modelo}: {e}")

    if not mejores:
        return None, 0.0

    mejores.sort(key=lambda x: x[1], reverse=True)
    mejor_modelo, mejor_score = mejores[0]

    return mejor_modelo, mejor_score

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# üîç Comparar imagen del cliente con base de modelos


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß  Helper: normaliza y verifica que el vector tenga 512 dim
def _a_unit(vec) -> np.ndarray:
    arr = np.asarray(vec, dtype=float).reshape(-1)
    if arr.size != 512:
        raise ValueError(f"Vector tama√±o {arr.size} ‚â† 512")
    n = np.linalg.norm(arr)
    if n == 0:
        raise ValueError("Vector con norma 0")
    return arr / n

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîç  Detectar modelo con CLIP
async def identificar_modelo_desde_imagen(base64_img: str) -> str:
    logging.debug("üß† [CLIP] Iniciando identificaci√≥n de modelo...")

    try:
        # 1Ô∏è‚É£ Cargar y sanitizar embeddings
        base = cargar_embeddings_desde_cache()
        embeddings: dict[str, list[list[float]]] = {}
        corruptos = []

        for modelo, vecs in base.items():
            if isinstance(vecs, list):
                if len(vecs) == 512 and all(isinstance(x, (int, float)) for x in vecs):
                    embeddings[modelo] = [vecs]
                else:
                    limpios = [v for v in vecs if isinstance(v, list) and len(v) == 512]
                    if limpios:
                        embeddings[modelo] = limpios
                    else:
                        corruptos.append((modelo, "sin_vectores_validos"))
            else:
                corruptos.append((modelo, "no_lista"))

        if corruptos:
            logging.warning(f"[CLIP] ‚ö†Ô∏è Embeddings corruptos filtrados: {corruptos[:5]} (total {len(corruptos)})")
        logging.info(f"[CLIP] ‚úÖ Embeddings listos: {len(embeddings)} modelos v√°lidos")

        # 2Ô∏è‚É£ Procesar imagen del cliente
        img_pil = decodificar_imagen_base64(base64_img)

        # üß™ INFO para verificar si la imagen est√° comprimida
        logging.info(f"[IMG] Formato: {img_pil.format}")
        logging.info(f"[IMG] Tama√±o: {img_pil.size} px")
        logging.info(f"[IMG] Modo de color: {img_pil.mode}")
        logging.info(f"[IMG] Bytes base64 recibidos: {len(base64_img)}")
        logging.info(f"[IMG] Tama√±o estimado en bytes: {(len(base64_img) * 3) // 4} bytes aprox")

        emb_cliente = _a_unit(generar_embedding_imagen(img_pil))

        # 3Ô∏è‚É£ Buscar la mejor coincidencia
        mejor_sim, mejor_modelo = 0.0, None
        for modelo, lista in embeddings.items():
            logging.debug(f"[CLIP] Comparando contra modelo: {modelo}")
            for idx, emb_ref in enumerate(lista):
                try:
                    arr_ref = _a_unit(emb_ref)
                    if arr_ref.shape != (512,):
                        logging.warning(f"[CLIP] ‚ö†Ô∏è Shape inv√°lido en {modelo}[{idx}]: {arr_ref.shape}")
                        continue

                    sim = float((emb_cliente * arr_ref).sum())
                    logging.debug(f"[CLIP] Similitud con {modelo}[{idx}]: {sim:.4f}")

                    if sim > mejor_sim:
                        mejor_sim, mejor_modelo = sim, modelo
                        logging.info(f"[CLIP] üÜï Mejor modelo hasta ahora: {modelo} (sim={sim:.4f})")

                except Exception as err:
                    logging.warning(f"[CLIP] ‚ö†Ô∏è Error comparando con {modelo}: {err}")
                    continue

        logging.info(f"üéØ [CLIP] Coincidencia final: {mejor_modelo} (sim={mejor_sim:.4f})")

        if mejor_modelo and mejor_sim >= 0.85:
            return f"‚úÖ La imagen coincide con *{mejor_modelo}*"
        else:
            return "‚ùå No pude identificar claramente el modelo. ¬øPuedes enviar otra foto?"

    except Exception as e:
        logging.exception(f"[CLIP] ‚ùå Error general:")
        return "‚ö†Ô∏è Ocurri√≥ un problema analizando la imagen."



DRIVE_FOLDER_ID = os.environ["DRIVE_FOLDER_ID"]



    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def convertir_palabras_a_numero(texto):  
    mapa = {
        "cero": "0", "uno": "1", "una": "1", "dos": "2", "tres": "3", "cuatro": "4",
        "cinco": "5", "seis": "6", "siete": "7", "ocho": "8", "nueve": "9",
        "diez": "10", "once": "11", "doce": "12", "trece": "13", "catorce": "14",
        "quince": "15", "diecis√©is": "16", "diecisiete": "17", "dieciocho": "18", "diecinueve": "19",
        "veinte": "20", "treinta": "30", "cuarenta": "40", "cincuenta": "50",
        "sesenta": "60", "setenta": "70", "ochenta": "80", "noventa": "90"
    }

    texto = texto.lower().replace("y", " ")  # ejemplo: "treinta y nueve" ‚Üí "treinta nueve"
    partes = texto.split()
    numero = ""

    for palabra in partes:
        if palabra in mapa:
            numero += mapa[palabra]
        elif palabra.isdigit():
            numero += palabra

    return numero if numero else None

def menciona_catalogo(texto: str) -> bool:
    texto = normalize(texto)
    claves = [
        "catalogo", "cat√°logo", "ver cat√°logo", "mostrar cat√°logo",
        "quiero ver", "ver productos", "mostrar productos",
        "ver lo que tienes", "ver tenis", "mu√©strame",
        "mostrar lo que tienes", "tenis disponibles"
    ]
    return any(palabra in texto for palabra in claves)

# ‚Äî‚Äî‚Äî VARIABLES DE ENTORNO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
OPENAI_API_KEY        = os.environ["OPENAI_API_KEY"]
NOMBRE_NEGOCIO        = os.environ.get("NOMBRE_NEGOCIO", "X100üî•üëü")
URL_SHEETS_INVENTARIO = os.environ["URL_SHEETS_INVENTARIO"]
URL_SHEETS_PEDIDOS    = os.environ["URL_SHEETS_PEDIDOS"]
EMAIL_DEVOLUCIONES    = os.environ["EMAIL_DEVOLUCIONES"]
EMAIL_JEFE            = os.environ["EMAIL_JEFE"]
SMTP_SERVER           = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT             = int(os.environ.get("SMTP_PORT", 587))
EMAIL_REMITENTE       = os.environ.get("EMAIL_REMITENTE")
EMAIL_PASSWORD        = os.environ.get("EMAIL_PASSWORD")

WELCOME_TEXT = (
    f"¬°Bienvenido a {NOMBRE_NEGOCIO}!\n\n"
    "Si tienes una foto puedes enviarla\n"
    "Si tienes numero de referencia enviamelo\n"
    "Puedes enviarme la foto del pedido\n"
    "Te gustaria ver unos videos de nuestras referenciasüëü?\n"
    "Cu√©ntame sin ning√∫n problema üòÄ"
)
CLIP_INSTRUCTIONS = (
    "Para enviarme una imagen, pulsa el √≠cono de clip (üìé), "
    "selecciona ‚ÄúGaler√≠a‚Äù o ‚ÄúArchivo‚Äù y elige la foto."
)
CATALOG_LINK = "https://wa.me/c/573007607245"
CATALOG_MESSAGE = (
    f"üëáüèªAQU√ç ESTA EL CAT√ÅLOGO üÜï\n"
    f"Sigue este enlace para ver la ultima colecci√≥n üëü XüíØ: {CATALOG_LINK}"
)

def fase_valida(fase: str) -> bool:
    fases_validas = [
        "esperando_color",
        "esperando_talla",
        "esperando_nombre",
        "esperando_telefono",
        "esperando_correo",
        "esperando_direccion",
        "esperando_comprobante",
        "imagen_detectada",
        "resumen_compra"
    ]
    return fase in fases_validas

    return fase in fases_validas

def enviar_correo(dest, subj, body):
    logging.info(f"[EMAIL STUB] To: {dest}\nSubject: {subj}\n{body}")

def enviar_correo_con_adjunto(dest, subj, body, adj):
    logging.info(f"[EMAIL STUB] To: {dest}\nSubject: {subj}\n{body}\n[Adj: {adj}]")

def extraer_texto_comprobante(path: str) -> str:
    try:
        logging.info(f"[OCR] üöÄ Iniciando OCR con Google Vision para: {path}")

        # 1Ô∏è‚É£ Cargar credenciales
        creds_raw = os.environ.get("GOOGLE_CREDS_JSON")
        if not creds_raw:
            logging.error("[OCR] ‚ùå GOOGLE_CREDS_JSON no est√° definido en las variables de entorno.")
            return ""

        credentials = service_account.Credentials.from_service_account_info(json.loads(creds_raw))
        logging.info("[OCR] ‚úÖ Credenciales cargadas correctamente")

        # 2Ô∏è‚É£ Crear cliente
        client = vision.ImageAnnotatorClient(credentials=credentials)

        # 3Ô∏è‚É£ Leer imagen
        with io.open(path, "rb") as image_file:
            content = image_file.read()
        if not content:
            logging.error("[OCR] ‚ùå La imagen est√° vac√≠a.")
            return ""

        # üîç NUEVO: Detalle t√©cnico de la imagen recibida
        try:
            img = Image.open(path)
            logging.info(f"[OCR] üñºÔ∏è Imagen cargada: {path}")
            logging.info(f"[OCR] üîç Formato: {img.format}")
            logging.info(f"[OCR] üìê Tama√±o: {img.size}")
            logging.info(f"[OCR] üé® Modo de color: {img.mode}")
        except Exception as e:
            logging.error(f"[OCR] ‚ùå No pude abrir la imagen con PIL para inspecci√≥n: {e}")

        # 4Ô∏è‚É£ Enviar a Google Vision
        image = vision.Image(content=content)
        logging.info("[OCR] üì§ Enviando imagen a Google Vision API (text_detection)...")
        response = client.text_detection(image=image)
        logging.info("[OCR] üì• Respuesta recibida de Vision API")

        # 5Ô∏è‚É£ Validar errores de respuesta
        if response.error.message:
            logging.error(f"[OCR ERROR] ‚ùå Error de Vision API: {response.error.message}")
            return ""

        # 6Ô∏è‚É£ Extraer texto
        texts = response.text_annotations
        if not texts:
            logging.warning("[OCR] ‚ö†Ô∏è No se detect√≥ texto (lista vac√≠a).")
            return ""

        texto = texts[0].description.strip()
        if not texto:
            logging.warning("[OCR] ‚ö†Ô∏è Se recibi√≥ texto vac√≠o.")
            return ""

        # 7Ô∏è‚É£ Mostrar texto l√≠nea por l√≠nea
        logging.info("[OCR] ‚úÖ Texto extra√≠do correctamente. Mostrando l√≠neas:")
        for i, linea in enumerate(texto.splitlines()):
            logging.info(f"[OCR LINEA {i}] ‚Üí {repr(linea)}")

        logging.info(f"[OCR] üü¢ √âxito: Se extrajo texto con {len(texto.split())} palabras y {len(texto)} caracteres.")
        return texto

    except Exception as e:
        logging.exception("[OCR] ‚ùå Excepci√≥n cr√≠tica ejecutando OCR")
        return ""

def es_comprobante_valido(texto: str) -> bool:
    logging.info("[OCR DEBUG] üîé Iniciando validaci√≥n del texto extra√≠do")

    # Mostrar texto crudo completo
    logging.info("[OCR DEBUG] Texto crudo completo:\n" + texto)

    # Mostrar l√≠nea por l√≠nea con representaci√≥n exacta
    for i, linea in enumerate(texto.splitlines()):
        logging.info(f"[OCR DEBUG] L√≠nea {i}: {repr(linea)}")

    # Normalizar texto
    texto_normalizado = unicodedata.normalize("NFKD", texto).encode("ascii", "ignore").decode("utf-8")
    texto_normalizado = texto_normalizado.lower()
    texto_normalizado = re.sub(r"[^\w\s]", "", texto_normalizado)

    logging.info("[OCR DEBUG] Texto normalizado:\n" + texto_normalizado)

    # Palabras clave aceptadas
    claves = [
        "pago exitoso",
        "transferencia exitosa",
        "comprobante",
        "Datos de la transferencia",
        "pago aprobado",
        "transferencia realizada"
    ]

    for clave in claves:
        if clave in texto_normalizado:
            logging.info(f"[OCR DEBUG] ‚úÖ Coincidencia encontrada: '{clave}'")
            return True

    logging.warning("[OCR DEBUG] ‚ùå No se encontr√≥ ninguna clave v√°lida en el texto extra√≠do.")
    return False

# ‚Äî‚Äî‚Äî UTILIDADES DE INVENTARIO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
estado_usuario: dict[int, dict] = {}
inventario_cache = None

def menciona_imagen(texto: str) -> bool:
    texto = normalize(texto)
    claves = [
        "foto", "imagen", "pantallazo", "screenshot", "captura",
        "tengo una foto", "te paso la imagen", "imagen del modelo",
        "screen", "de instagram", "vi en insta", "historia de insta",
        "la tengo guardada", "foto del tenis", "foto del zapato"
    ]
    return any(palabra in texto for palabra in claves)

def normalize(text) -> str:
    s = "" if text is None else str(text)
    t = unicodedata.normalize('NFKD', s.strip().lower())
    return "".join(ch for ch in t if not unicodedata.combining(ch))

CONVERSION_TALLAS = {
    "usa": {
        "6": "38", "6.5": "38.5", "7": "39", "7.5": "39.5",
        "8": "40", "8.5": "40.5", "9": "41", "9.5": "41.5",
        "10": "42", "10.5": "43", "11": "44", "11.5": "44.5",
        "12": "45", "12.5": "45.5", "13": "46"
    },
    "euro": {
        "38": "38", "38.5": "38.5", "39": "39", "39.5": "39.5",
        "40": "40", "40.5": "40.5", "41": "41", "41.5": "41.5",
        "42": "42", "43": "43", "44": "44", "44.5": "44.5",
        "45": "45", "45.5": "45.5", "46": "46"
    },
    "colombia": {
        "38": "38", "38.5": "38.5", "39": "39", "39.5": "39.5",
        "40": "40", "40.5": "40.5", "41": "41", "41.5": "41.5",
        "42": "42", "43": "43", "44": "44", "44.5": "44.5",
        "45": "45", "45.5": "45.5", "46": "46"
    }
}
def detectar_talla(texto_usuario: str, tallas_disponibles: list[str]) -> str | None:
    texto = normalize(texto_usuario)

    # Reemplazos comunes para tallas con medio punto
    reemplazos = {
        "seis y medio": "6.5", "7 y medio": "7.5", "ocho y medio": "8.5", "nueve y medio": "9.5",
        "diez y medio": "10.5", "once y medio": "11.5", "doce y medio": "12.5",

        "6 y 1/2": "6.5", "7 y 1/2": "7.5", "8 y 1/2": "8.5", "9 y 1/2": "9.5",
        "10 y 1/2": "10.5", "11 y 1/2": "11.5", "12 y 1/2": "12.5",

        "seis punto cinco": "6.5", "siete punto cinco": "7.5", "ocho punto cinco": "8.5",
        "nueve punto cinco": "9.5", "diez punto cinco": "10.5", "once punto cinco": "11.5", "doce punto cinco": "12.5",

        "6.5": "6.5", "7.5": "7.5", "8.5": "8.5", "9.5": "9.5", "10.5": "10.5",
        "11.5": "11.5", "12.5": "12.5", "13": "13"
    }

    for k, v in reemplazos.items():
        if k in texto:
            texto = texto.replace(k, v)

    # Sistema
    if "usa" in texto:
        sistema = "usa"
    elif "euro" in texto or "europea" in texto:
        sistema = "euro"
    elif "colomb" in texto:
        sistema = "colombia"
    else:
        sistema = None

    # Extrae n√∫meros incluyendo decimales (6.5, 10.5, etc)
    numeros = re.findall(r"\d+(?:\.\d+)?", texto)

    if not numeros:
        return None

    for num in numeros:
        if sistema:
            talla_estandar = CONVERSION_TALLAS.get(sistema, {}).get(num)
            if talla_estandar and talla_estandar in tallas_disponibles:
                return talla_estandar
        else:
            if num in tallas_disponibles:
                return num

    return None

def reset_estado(cid: int):
    estado_usuario[cid] = {
        "fase": "inicio",
        "marca": None, "modelo": None, "color": None, "talla": None,
        "nombre": None, "correo": None, "telefono": None,
        "ciudad": None, "provincia": None, "direccion": None,
        "referencia": None, "resumen": None, "sale_id": None
    }

def menu_botones(opts: list[str]):
    return ReplyKeyboardMarkup([[KeyboardButton(o)] for o in opts], resize_keyboard=True)

def obtener_inventario() -> list[dict]:
    global inventario_cache
    if inventario_cache is None:
        try:
            inventario_cache = requests.get(URL_SHEETS_INVENTARIO).json()
        except:
            inventario_cache = []
    return inventario_cache

def disponible(item: dict) -> bool:
    return normalize(item.get("stock","")) == "si"

def obtener_marcas_unicas(inv: list[dict]) -> list[str]:
    return sorted({i.get("marca","").strip() for i in inv if disponible(i)})

def obtener_modelos_por_marca(inv: list[dict], marca: str) -> list[str]:
    return sorted({i.get("modelo","").strip()
                   for i in inv
                   if normalize(i.get("marca","")) == normalize(marca) and disponible(i)})

def obtener_colores_por_modelo(inv: list[dict], modelo: str) -> list[str]:
    return sorted({i.get("color", "").strip()
                   for i in inv
                   if normalize(i.get("modelo", "")) == normalize(modelo)
                   and disponible(i)})

def obtener_tallas_por_color(inv: list[dict], modelo: str, color: str) -> list[str]:
    return sorted({
        str(i.get("talla", "")).strip()
        for i in inv
        if normalize(i.get("modelo", "")) == normalize(modelo)
        and normalize(i.get("color", "")) == normalize(color)
        and disponible(i)
    })

#  TRANSCRIPCI√ìN DE AUDIO (WHISPER)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TEMP_AUDIO_DIR = "temp_audio"
os.makedirs(TEMP_AUDIO_DIR, exist_ok=True)

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def transcribe_audio(file_path: str) -> str | None:
    """
    Env√≠a el .ogg a Whisper-1 (idioma ES) y devuelve la transcripci√≥n.
    Si falla, devuelve None.
    """
    try:
        with open(file_path, "rb") as f:
            audio_bytes = io.BytesIO(f.read())
            audio_bytes.name = os.path.basename(file_path)  # necesario para Whisper

            rsp = await client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_bytes,
                language="es",
                response_format="text",
                prompt="Espa√±ol Colombia, jerga: parce, mano, √±ero, buenos d√≠as, buenas, hola"
            )

        if isinstance(rsp, str) and rsp.strip():
            return rsp.strip()
    except Exception as e:
        logging.error(f"‚ùå Whisper error: {e}")
    return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Manejar preguntas frecuentes (FAQ)
async def manejar_pqrs(update, ctx) -> bool:
    txt = normalize(update.message.text or "")

    faq_respuestas = {
        "garantia": "üõ°Ô∏è Todos nuestros productos tienen *60 d√≠as de garant√≠a* por defectos de f√°brica.",
        "garant√≠a": "üõ°Ô∏è Todos nuestros productos tienen *60 d√≠as de garant√≠a* por defectos de f√°brica.",
        "envio": "üöö Hacemos env√≠os a toda Colombia en m√°ximo *2 d√≠as h√°biles*.",
        "env√≠o": "üöö Hacemos env√≠os a toda Colombia en m√°ximo *2 d√≠as h√°biles*.",
        "demora": "‚è≥ El env√≠o normalmente tarda *2 d√≠as h√°biles*. ¬°Te llega r√°pido!",
        "contraentrega": "üíµ Tenemos *pago contra entrega* con anticipo de $35.000.",
        "pago": "üí≥ Puedes pagar por transferencia bancaria, QR o contra entrega.",
        "original": "‚úÖ S√≠, son *originales colombianos* de alta calidad.",
        "ubicacion": "üìç Estamos en *Bucaramanga, Santander* y enviamos a todo el pa√≠s.",
        "ubicaci√≥n": "üìç Estamos en *Bucaramanga, Santander* y enviamos a todo el pa√≠s.",
        "talla": "üìè Nuestra horma es *normal*. La talla que usas normalmente te quedar√° perfecta.",
        "descuento": "üéâ Si compras 2 pares te damos *10% de descuento* adicional."
    }

    for palabra, respuesta in faq_respuestas.items():
        if palabra in txt:
            await ctx.bot.send_message(
                chat_id=update.effective_chat.id,
                text=respuesta,
                parse_mode="Markdown"
            )
            return True

    return False

def decodificar_imagen_base64(base64_str: str) -> Image.Image:
    data = base64.b64decode(base64_str + "===")
    return Image.open(io.BytesIO(data)).convert("RGB")

# üß† Cargar base de embeddings guardados
EMBEDDINGS_PATH = "/var/data/embeddings.json"

def cargar_embeddings_desde_cache():
    path = "/var/data/embeddings.json"
    if not os.path.exists(path):
        raise FileNotFoundError("No se encontr√≥ embeddings.json; ejecuta generar_embeddings.py primero.")
    with open(path, "r") as f:
        return json.load(f)

# üî• Manejar imagen enviada por el usuario (ahora con CLIP)
async def manejar_imagen(update, ctx):
    cid = update.effective_chat.id
    est = estado_usuario.setdefault(cid, reset_estado(cid))

    # Descargar la imagen temporalmente
    f = await update.message.photo[-1].get_file()
    tmp_path = os.path.join("temp", f"{cid}.jpg")
    os.makedirs("temp", exist_ok=True)
    await f.download_to_drive(tmp_path)

    # Leer imagen como base64
    with open(tmp_path, "rb") as f_img:
        base64_img = base64.b64encode(f_img.read()).decode("utf-8")
    os.remove(tmp_path)

    try:
        mensaje = await identificar_modelo_desde_imagen(base64_img)

        if "coincide con *" in mensaje.lower():
            modelo_detectado = re.findall(r"\*(.*?)\*", mensaje)
            if modelo_detectado:
                partes = modelo_detectado[0].split("_")
                marca  = partes[0] if len(partes) > 0 else "Desconocida"
                modelo = partes[1] if len(partes) > 1 else "Desconocido"
                color  = partes[2] if len(partes) > 2 else "Desconocido"

                est.update({
                    "marca":  marca,
                    "modelo": modelo,
                    "color":  color,
                    "fase":   "imagen_detectada"
                })

            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"üì∏ La imagen coincide con:\n"
                    f"*Marca:* {marca}\n"
                    f"*Modelo:* {modelo}\n"
                    f"*Color:* {color}\n\n"
                    "¬øDeseas continuar tu compra con este modelo? (SI/NO)"
                ),
                parse_mode="Markdown",
                reply_markup=menu_botones(["SI", "NO"]),
            )
            return

        # Si no hubo coincidencia satisfactoria
        reset_estado(cid)
        await ctx.bot.send_message(
            chat_id=cid,
            text=mensaje,
            parse_mode="Markdown",
            reply_markup=menu_botones(["Enviar otra imagen", "Ver cat√°logo"]),
        )

    except Exception as e:
        logging.error(f"‚ùå Error usando CLIP en manejar_imagen: {e}")
        reset_estado(cid)
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ö†Ô∏è Hubo un problema procesando la imagen. ¬øPuedes intentar con otra?",
            reply_markup=menu_botones(["Enviar otra imagen"]),
        )

    # üîç Identificar modelo con CLIP

    try:
        mensaje = await identificar_modelo_desde_imagen(base64_img)

        if "coincide con *" in mensaje.lower():
            # extrae el texto entre asteriscos *
            modelo_detectado = re.findall(r"\*(.*?)\*", mensaje)
            if modelo_detectado:
                partes = modelo_detectado[0].split("_")
                marca  = partes[0] if len(partes) > 0 else "Desconocida"
                modelo = partes[1] if len(partes) > 1 else "Desconocido"
                color  = partes[2] if len(partes) > 2 else "Desconocido"

                est.update({
                    "marca":  marca,
                    "modelo": modelo,
                    "color":  color,
                    "fase":   "imagen_detectada"
                })

            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"üì∏ La imagen coincide con:\n"
                    f"*Marca:* {marca}\n"
                    f"*Modelo:* {modelo}\n"
                    f"*Color:* {color}\n\n"
                    "¬øDeseas continuar tu compra con este modelo? (SI/NO)"
                ),
                parse_mode="Markdown",
                reply_markup=menu_botones(["SI", "NO"]),
            )
            return

        # ‚¨áÔ∏è¬†Si no hubo coincidencia satisfactoria
        reset_estado(cid)
        await ctx.bot.send_message(
            chat_id=cid,
            text=mensaje,   # contiene la respuesta 'no identificado‚Ä¶'
            parse_mode="Markdown",
            reply_markup=menu_botones(["Enviar otra imagen", "Ver cat√°logo"]),
        )
        return

    except Exception as e:
        logging.error(f"‚ùå Error usando CLIP en manejar_imagen: {e}")
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ö†Ô∏è Hubo un problema procesando la imagen. ¬øPuedes intentar de nuevo?",
            reply_markup=menu_botones(["Enviar otra imagen"]),
        )
        return

        # Si no se detect√≥ bien
        reset_estado(cid)
        await ctx.bot.send_message(
            chat_id=cid,
            text="üòî No pude reconocer el modelo de la imagen. ¬øQuieres intentar otra vez?",
            parse_mode="Markdown",
            reply_markup=menu_botones(["Enviar otra imagen", "Ver cat√°logo"])
        )

    except Exception as e:
        logging.error(f"‚ùå Error usando CLIP en manejar_imagen: {e}")
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ùå Hubo un error al procesar la imagen. ¬øPuedes intentar de nuevo?",
            reply_markup=menu_botones(["Enviar otra imagen"])
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Registrar la orden en Google Sheets
def registrar_orden(data: dict, fase: str = ""):
    payload = {
        "numero_venta": data.get("N√∫mero Venta", ""),
        "fecha_venta":  data.get("Fecha Venta", ""),
        "cliente":      data.get("Cliente", ""),
        "cedula":       data.get("C√©dula", ""),  # ‚úÖ NUEVO
        "telefono":     data.get("Tel√©fono", ""),
        "producto":     data.get("Producto", ""),
        "color":        data.get("Color", ""),
        "talla":        data.get("Talla", ""),
        "correo":       data.get("Correo", ""),
        "pago":         data.get("Pago", ""),
        "estado":       data.get("Estado", ""),
        "fase_actual":  fase                     # ‚úÖ NUEVO
    }
    logging.info(f"[SHEETS] Payload JSON que env√≠o:\n{payload}")
    try:
        resp = requests.post(URL_SHEETS_PEDIDOS, json=payload)
        logging.info(f"[SHEETS] HTTP {resp.status_code} ‚Äî Body: {resp.text}")
    except Exception as e:
        logging.error(f"[SHEETS] Error al hacer POST: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Generar ID √∫nico para una venta
def generate_sale_id() -> str:
    ts = datetime.now().strftime("%Y%m%d%H%M%S")  # ‚úÖ sin datetime.datetime
    rnd = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"VEN-{ts}-{rnd}"

async def enviar_sticker(ctx, cid, nombre_archivo):
    ruta = os.path.join("/var/data/stickers", nombre_archivo)
    if os.path.exists(ruta):
        try:
            await ctx.client.sendImageAsSticker(cid, ruta)
            logging.info(f"‚úÖ Sticker enviado: {ruta}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è No se pudo enviar el sticker {nombre_archivo}: {e}")
    else:
        logging.warning(f"‚ö†Ô∏è Sticker no encontrado: {ruta}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FUNCI√ìN AUXILIAR ‚Äì ENVIAR VIDEO (VENOM) CON LOGS DETALLADOS
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def enviar_video_referencia(cid, ctx, referencia):
    logging.info(f"[VIDEO_FN] ‚á¢ Petici√≥n video ref={referencia!r}  cid={cid}")

    opciones = {
        # üî• Referencias2.mp4
        "261": "referencias2.mp4", "ds 261": "referencias2.mp4",
        "277": "referencias2.mp4", "ds 277": "referencias2.mp4",
        "303": "referencias2.mp4", "ds 303": "referencias2.mp4",
        "295": "referencias2.mp4", "ds 295": "referencias2.mp4",
        "299": "referencias2.mp4", "ds 299": "referencias2.mp4",

        # üìº Referencias.mp4
        "279": "referencias.mp4",  "ds 279": "referencias.mp4",
        "304": "referencias.mp4",  "ds 304": "referencias.mp4",
        "305": "referencias.mp4",  "ds 305": "referencias.mp4",

        # üëü Otros
        "ni√±o": "infantil.mp4",    "ni√±os": "infantil.mp4",
        "infantil": "infantil.mp4","kids":  "infantil.mp4",

        "promo": "descuentos.mp4", "descuento": "descuentos.mp4",
        "descuentos": "descuentos.mp4"
    }

    nombres_real = {
        "referencias.mp4":  "Referencias.mp4",
        "referencias2.mp4": "Referencias2.mp4",
        "infantil.mp4":     "Infantil.mp4",
        "descuentos.mp4":   "Descuentos.mp4"
    }

    ref_norm = normalize(referencia).lower()
    nombre_logico = opciones.get(ref_norm)
    nombre_real = nombres_real.get(nombre_logico)
    logging.debug(
        f"[VIDEO_FN] ref_norm={ref_norm}  "
        f"nombre_logico={nombre_logico}  nombre_real={nombre_real}"
    )

    if not nombre_real:
        logging.warning(f"[VIDEO_FN] Video no reconocido para ref={ref_norm}")
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ùå No reconoc√≠ ese video. Intenta con el n√∫mero o nombre correcto."
        )
        return None

    ruta_video = os.path.join("/var/data/videos", nombre_real)
    existe = os.path.exists(ruta_video)
    logging.debug(f"[VIDEO_FN] ruta_video={ruta_video}  existe={existe}")

    if not existe:
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ö†Ô∏è El video a√∫n no est√° disponible. Estoy actualizando mi galer√≠a."
        )
        return None

    tama√±o = os.path.getsize(ruta_video)
    logging.debug(f"[VIDEO_FN] Tama√±o archivo='{nombre_real}' = {tama√±o:,} bytes")

    try:
        with open(ruta_video, "rb") as f:
            b64 = base64.b64encode(f.read()).decode("utf-8")

        logging.debug(f"[VIDEO_FN] Longitud base64 = {len(b64):,} caracteres")

        video_dict = {
            "type": "video",
            "base64": b64,
            "mimetype": "video/mp4",
            "filename": nombre_real,
            "text": "üé¨ Aqu√≠ tienes el video solicitado "
        }
        logging.info(f"[VIDEO_FN] ‚úì Dict video listo para enviar (keys={list(video_dict.keys())})")
        return video_dict

    except Exception as e:
        logging.error(f"[VIDEO_FN] ‚ùå Error leyendo/enviando video: {e}")
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ùå No logr√© enviarte el video. Intenta de nuevo."
        )
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FUNCI√ìN AUXILIAR ‚Äì Detectar color en texto con alias y video
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üìº Asociaci√≥n de colores y modelos por video espec√≠fico
colores_video_modelos = {
    "referencias": {
        "verde":    ["279", "305"],
        "azul":     ["279", "304", "305"],  # 305 tambi√©n como azul
        "fucsia":   ["279"],
        "amarillo": ["279"],
        "naranja":  ["279", "304"],
        "negro":    ["279", "304"],
        "blanco":   ["279", "305"],
        "rojo":     ["279"],
        "aqua":     ["305"],
    }
}

# üé® Sin√≥nimos y variantes comunes de clientes
color_aliases = {
    "rosado": "fucsia",
    "rosa": "fucsia",
    "fucsias": "fucsia",
    "celeste": "azul",
    "azul cielo": "aqua",
    "azul clarito": "aqua",
    "azul claro": "aqua",
    "azulito": "aqua",
    "azules": "azul",
    "verdes": "verde",
    "amarillas": "amarillo",
    "blancos": "blanco",
    "negros": "negro",
    "rojos": "rojo",
    "naranjas": "naranja",
    "aqua": "azul",        # üëà alias agregado correctamente ahora
    "turquesa": "aqua"
}

# üß† Detecci√≥n especial para colores por video
def detectar_color_video(texto: str) -> str:
    texto = texto.lower()
    texto = texto.replace("las ", "").replace("los ", "").strip()

    # Aplicar alias conocidos
    for palabra, real_color in color_aliases.items():
        if palabra in texto:
            return real_color

    # Fallback directo
    for color in colores_video_modelos.get("referencias", {}):
        if color in texto:
            return color

    return ""

# üé® Fallback general para otros flujos o videos
def detectar_color(texto: str) -> str:
    colores = [
        "negro", "blanco", "rojo", "azul", "amarillo", "verde",
        "rosado", "gris", "morado", "naranja", "caf√©", "beige",
        "ne√≥n", "lim√≥n", "fucsia", "celeste", "aqua"
    ]
    texto = texto.lower()
    for c in colores:
        if c in texto:
            return c
    return ""

# üëü Obtener tallas desde inventario, respetando alias del color
def obtener_tallas_por_color_alias(inventario, modelo, color_usuario):
    color_usuario = normalize(color_usuario)
    
    # üîÅ Crear set con todos los colores equivalentes: color original + sin√≥nimos
    colores_equivalentes = {color_usuario}
    for alias, real in color_aliases.items():
        if normalize(alias) == color_usuario or normalize(real) == color_usuario:
            colores_equivalentes.add(normalize(alias))
            colores_equivalentes.add(normalize(real))

    tallas = set()
    for item in inventario:
        if normalize(item.get("modelo", "")) != normalize(modelo):
            continue
        if item.get("stock", "").lower() != "si":
            continue

        color_item = normalize(item.get("color", ""))
        if any(color_equiv in color_item for color_equiv in colores_equivalentes):
            tallas.add(str(item.get("talla", "")))

    return sorted(tallas)



# --------------------------------------------------------------------------------------------------

async def responder(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    numero = str(cid)

    if cid not in estado_usuario:
        reset_estado(cid)
        await update.message.reply_text(
            WELCOME_TEXT,
            reply_markup=menu_botones([
                "Hacer pedido", "Enviar imagen", "Ver cat√°logo",
                "Rastrear pedido", "Realizar cambio"
            ])
        )
        return

    est = estado_usuario[cid]
    inv = obtener_inventario()

    txt_raw = update.message.text or ""
    txt = normalize(txt_raw)

    print("üß† FASE:", est.get("fase"))
    print("üß† TEXTO:", txt_raw, "|", repr(txt_raw))
    print("üß† ESTADO:", est)

    if txt in ("reset", "reiniciar", "empezar", "volver", "/start", "menu", "inicio"):
        reset_estado(cid)
        await update.message.reply_text(
            WELCOME_TEXT,
            reply_markup=menu_botones([
                "Hacer pedido", "Enviar imagen", "Ver cat√°logo",
                "Rastrear pedido", "Realizar cambio"
            ])
        )
        return

    if menciona_catalogo(txt_raw):
        await ctx.bot.send_message(
            chat_id=cid,
            text=CATALOG_MESSAGE
        )
        est["fase"] = "inicio"
        return

    # üé¨ Si el cliente pide ver videos (solo si NO est√° ya esperando uno)
    if est.get("fase") != "esperando_video_referencia":
        if any(frase in txt for frase in ("videos", "quiero videos", "ver videos", "video")):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üé¨ ¬°Claro! Aqu√≠ tienes videos de nuestras referencias m√°s populares:\n\n"
                    "‚Ä¢ *DS 279 304 305* üî•\n"
                    "‚Ä¢ *DS 261 277 303 295 299* üî•\n"
                    "‚Ä¢ *REFERENCIAS NI√ëO* üë∂\n"
                    "‚Ä¢ *PROMO DESCUENTOS 39% OFF* üí∏\n\n"
                    "Escr√≠beme el n√∫mero o el nombre del video que deseas ver."
                ),
                parse_mode="Markdown"
            )
            est["fase"] = "esperando_video_referencia"
            estado_usuario[cid] = est
            return

    # üé¨ Procesar selecci√≥n de video
    if est.get("fase") == "esperando_video_referencia":
        logging.info("[RESPONDER] ‚á¢ Entr√≥ fase 'esperando_video_referencia'")
        logging.debug(f"[RESPONDER] Texto bruto = {txt_raw!r}")

        ref = normalize(txt_raw)
        logging.debug(f"[RESPONDER] Referencia normalizada = {ref!r}")

        video_respuesta = await enviar_video_referencia(cid, ctx, ref)
        logging.debug(f"[RESPONDER] video_respuesta type = {type(video_respuesta)}")

        if isinstance(video_respuesta, dict):
            # ‚úÖ IMPORTANTE: guardar fase ANTES del return para WhatsApp (Venom)
            est["video_activo"] = "referencia.mp4"  # o asigna seg√∫n ref si quieres m√°s precisi√≥n
            est["fase"] = "esperando_color_post_video"
            estado_usuario[cid] = est
            logging.info("[RESPONDER] ‚úì Dict video recibido ‚Äì se devolver√° al webhook")
            return video_respuesta

        if video_respuesta:
            est["video_activo"] = str(video_respuesta)  # por ejemplo: "referencia.mp4"
            est["fase"] = "esperando_color_post_video"
        else:
            est["fase"] = "inicio"  # si no se reconoce el video

        estado_usuario[cid] = est
        return

    # üü© Fase post-video: el cliente dice un color (‚Äúme gustaron los verdes‚Äù)
    if est.get("fase") == "esperando_color_post_video":
        video_activo = est.get("video_activo", "").replace(".mp4", "").lower()

        if video_activo == "referencias":
            color = detectar_color_video(txt)

            # ‚úÖ NUEVO: incluir alias que apuntan al mismo color
            colores_equivalentes = [color] + [k for k, v in color_aliases.items() if v == color]
            modelos_permitidos = []
            for c in colores_equivalentes:
                modelos_permitidos.extend(colores_video_modelos.get(video_activo, {}).get(c, []))
        else:
            color = detectar_color(txt)
            modelos_permitidos = []

        if not color:
            await ctx.bot.send_message(cid, "üëÄ No entend√≠ el color. ¬øPuedes repetirlo?")
            return

        if video_activo == "referencias" and not modelos_permitidos:
            await ctx.bot.send_message(cid, f"üòï No encontr√© modelos de color *{color.upper()}* para ese video.")
            return

        ruta = "/var/data/modelos_video"
        if not os.path.exists(ruta):
            await ctx.bot.send_message(cid, "‚ö†Ô∏è A√∫n no tengo im√°genes cargadas. Intenta m√°s tarde.")
            return

        # üìÅ Buscar im√°genes que contengan el color o cualquier alias relacionado
        aliases_del_color = [color] + [k for k, v in color_aliases.items() if v == color]

        coincidencias = [
            f for f in os.listdir(ruta)
            if f.lower().endswith(".jpg")
            and any(alias in f.lower() for alias in aliases_del_color)
            and (not modelos_permitidos or any(modelo in f for modelo in modelos_permitidos))
        ]

        if not coincidencias:
            await ctx.bot.send_message(cid, f"üòï No encontr√© modelos con ese color.")
            return

        for archivo in coincidencias:
            try:
                path = os.path.join(ruta, archivo)
                modelo = archivo.replace(".jpg", "").replace("_", " ")
                await ctx.bot.send_photo(
                    chat_id=cid,
                    photo=open(path, "rb"),
                    caption=f"üì∏ En el video aparece el modelo *{modelo}*",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"‚ùå Error enviando imagen: {e}")
                await ctx.bot.send_message(cid, "‚ö†Ô∏è No pude enviar una de las im√°genes.")

        await ctx.bot.send_message(cid, "üßê ¬øCu√°l de estos modelos te interesa?")
        est["color"] = color  # ‚úÖ Guardar el color para el siguiente paso del flujo
        est["fase"] = "esperando_modelo_elegido"
        estado_usuario[cid] = est
        return


    
    # üîÑ Mostrar todos los colores del modelo (solo si est√° en fase inicial)
    if est.get("fase") in ("inicio", "haciendo_pedido"):
        match_modelo = re.search(r"\b(279|304|305)\b", txt)
        if match_modelo:
            modelo = str(match_modelo.group(1))
            ruta = "/var/data/modelos_colores"  # Aseg√∫rate que este es el path correcto

            if not os.path.exists(ruta) or not os.listdir(ruta):
                await ctx.bot.send_message(cid, "‚ö†Ô∏è A√∫n no tengo im√°genes cargadas. Intenta m√°s tarde.")
                return

            imagenes_modelo = [
                f for f in os.listdir(ruta)
                if f.lower().endswith((".jpg", ".jpeg", ".png")) and modelo in f
            ]

            if not imagenes_modelo:
                await ctx.bot.send_message(cid, f"üòï No encontr√© im√°genes del modelo {modelo}.")
                return

            for archivo in imagenes_modelo:
                try:
                    path = os.path.join(ruta, archivo)
                    color = archivo.replace(".jpg", "").replace(".jpeg", "").replace(".png", "")
                    color = color.replace("_", " ").replace(modelo, "").strip()
                    await ctx.bot.send_photo(
                        chat_id=cid,
                        photo=open(path, "rb"),
                        caption=f"üì∏ Modelo *{modelo}* color *{color}*",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"‚ùå Error enviando imagen: {e}")
                    await ctx.bot.send_message(cid, "‚ö†Ô∏è No pude enviar una de las im√°genes.")

            await ctx.bot.send_message(cid, "üßê ¬øCu√°l color de este modelo te interesa?")
            est["fase"] = "esperando_color"
            est["referencia"] = modelo
            estado_usuario[cid] = est
            return

    # üü¶ El cliente ya vio los modelos y confirma: "quiero los 279", "s√≠ esos", etc.
    if est.get("fase") == "esperando_modelo_elegido":
        referencia_mencionada = re.search(r"\b(279|304|305)\b", txt)
        afirmacion = any(palabra in txt for palabra in (
            "s√≠", "s", "esos", "quiero", "me gustaron", "me sirven",
            "ese", "perfecto", "dale", "me encanta", "lo quiero"
        ))

        ref_final = ""
        if referencia_mencionada:
            ref_final = referencia_mencionada.group(1)
        elif afirmacion:
            ref_final = est.get("referencia") or est.get("ultimo_modelo", "")

        if ref_final:
            # ‚îÄ‚îÄ Guardar datos clave ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            est["referencia"] = ref_final
            est["modelo"]     = ref_final
            est["color"]      = est.get("color", "")
            if not est.get("marca"):      # marca por defecto si viene de video
                est["marca"] = "DS"

            modelo = est["modelo"]
            color  = est["color"]

            # ‚îÄ‚îÄ Alias de color ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            def colores_equivalentes(base: str):
                b  = normalize(base)
                eq = {b}
                for alias, real in color_aliases.items():
                    if normalize(alias) == b or normalize(real) == b:
                        eq.update({normalize(alias), normalize(real)})
                return eq

            equivalentes = colores_equivalentes(color)

            # ‚îÄ‚îÄ Precio desde Google Sheets (comparaci√≥n flexible) ‚îÄ‚îÄ
            precio = next(
                (row.get("precio") for row in inv
                 if normalize(row.get("modelo", "")) == normalize(modelo)
                 and any(eq in normalize(row.get("color", "")) for eq in equivalentes)),
                None
            )
            est["precio_total"] = int(precio) if precio else 0

            # ‚îÄ‚îÄ Tallas disponibles usando alias ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            tallas = obtener_tallas_por_color_alias(inv, modelo, color)
            if isinstance(tallas, (int, float, str)):
                tallas = [str(tallas)]

            if tallas:
                est["fase"] = "esperando_talla"
                estado_usuario[cid] = est

                await ctx.bot.send_message(
                    chat_id=cid,
                    text=(
                        f"üìè Estas son las tallas disponibles para el modelo *{modelo}* "
                        f"color *{color.upper()}*:\n"
                        f"üëâ Opciones: {', '.join(tallas)}"
                    ),
                    parse_mode="Markdown"
                )
                return
            else:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"‚ùå No hay tallas disponibles para el modelo {modelo} en color {color.upper()}."
                )
                return

        #  Si el usuario no especific√≥ un modelo v√°lido
        await ctx.bot.send_message(
            chat_id=cid,
            text="üëÄ ¬øCu√°l de los modelos que viste te gust√≥ m√°s? Puedes decir solo el n√∫mero, como *279*."
        )
        return







    # üí¨ Si el usuario pregunta el precio en cualquier parte del flujo
    palabras_precio = (
        "precio", "preci√≥", "prezio", "que presio tienen",
        "valor", "que presio hay", "vale", "valen", "que precio tienen",
        "vale esto", "valen esto", "costo", "kosto", "cuesto",
        "cuanto cuesta", "cuanto vale", "cuanto esta", "cuanto es",
        "cuanto valen", "cuanto cuestan", "cuanto sale", "que precio", "que vale",
        "kuanto cuesta", "kuanto bale", "cuanttto bale", "k vale", "q cuesta",
        "q precio", "q vale", "cuanto me sale", "vale cuanto", "cuesta cuanto",
        "vale algo", "valen algo", "cuanto cobras", "cuanto cobran",
        "balor", "cuanto baale", "k bale", "vale eso", "cuanto valdra"
    )

    txt_norm = normalize(txt)

    pregunta_precio = (
        any(p in txt_norm for p in palabras_precio) or
        any(difflib.get_close_matches(w, palabras_precio, n=1, cutoff=0.8)
            for w in txt_norm.split())
    )

    if pregunta_precio:
        if est.get("modelo") and est.get("color"):
            precio = next(
                (i["precio"] for i in inv if
                 normalize(i["marca"])  == normalize(est.get("marca", "")) and
                 normalize(i["modelo"]) == normalize(est["modelo"]) and
                 normalize(i["color"])  == normalize(est["color"])
                ),
                None
            )
            if precio:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"üí∞ El modelo *{est['modelo']}* color *{est['color']}* "
                         f"tiene un precio de *${precio}* COP.",
                    parse_mode="Markdown"
                )
            else:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text="üòï A√∫n no tengo el precio exacto de ese modelo. D√©jame verificarlo."
                )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text=("Para darte el precio necesito saber la referencia o repetirla. "
                      "¬øPuedes decirme cu√°l est√°s mirando?")
            )
        return


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Preguntas frecuentes (FAQ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if est.get("fase") not in ("esperando_pago", "esperando_comprobante"):
        texto_normalizado = normalize(txt_raw)

        # FAQ 1: ¬øCu√°nto demora el env√≠o?
        if any(frase in texto_normalizado for frase in (
            "cuanto demora", "cuanto tarda", "cuanto se demora",
            "en cuanto llega", "me llega rapido", "llegan rapido"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üöö El tiempo de entrega depende de la ciudad de destino, "
                    "pero generalmente tarda *2 d√≠as h√°biles* en llegar.\n\n"
                    "Si lo necesitas para *ma√±ana mismo*, podemos enviarlo al terminal de transporte. "
                    "En ese caso aplica *pago anticipado* (no contra entrega)."
                ),
                parse_mode="Markdown"
            )
            await reanudar_fase_actual(cid, ctx, est)
            return

        # FAQ 2: ¬øTienen pago contra entrega?
        if any(frase in texto_normalizado for frase in (
            "pago contra entrega", "pago contraentrega", "contraentrega", "contra entrega",
            "pagan al recibir", "puedo pagar al recibir", "tienen contra entrega"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üì¶ ¬°Claro que s√≠! Tenemos *pago contra entrega*.\n\n"
                    "Pedimos un *anticipo de $35‚ÄØ000* que cubre el env√≠o. "
                    "Ese valor se descuenta del precio total cuando recibes el pedido."
                ),
                parse_mode="Markdown"
            )
            await reanudar_fase_actual(cid, ctx, est)
            return

        # FAQ 3: ¬øTienen garant√≠a?
        if any(frase in texto_normalizado for frase in (
            "tienen garantia", "hay garantia", "garantia", "tienen garantia de fabrica"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üõ°Ô∏è Todos nuestros productos tienen *garant√≠a de 60 d√≠as* "
                    "por defectos de f√°brica o problemas de pegado.\n\n"
                    "Cualquier inconveniente, estamos para ayudarte."
                ),
                parse_mode="Markdown"
            )
            await reanudar_fase_actual(cid, ctx, est)
            return

        # üì¶ FAQ 4: Frases comunes de desconfianza (antes del uso)
        frases_desconfianza = [
            "no conf√≠o", "no confio", "desconf√≠o", "desconfio",
            "me han robado", "me robaron", "ya me robaron", "me tumbaron",
            "me estafaron", "ya me estafaron", "me hicieron el robo",
            "no quiero pagar antes", "no quiero pagar anticipado",
            "no quiero dar plata antes", "no quiero enviar dinero sin ver",
            "me da desconfianza", "me da miedo pagar", "no me da confianza",
            "me han tumbado", "me hicieron fraude", "tengo miedo de pagar",
            "no tengo seguridad", "prefiero contraentrega", "quiero pagar al recibir",
            "pago al recibir", "solo contraentrega", "pago cuando llegue",
            "cuando me lleguen pago", "cuando llegue pago", "pago cuando me llegue",
            "me tumbaron una vez", "me jodieron", "ya me tumbaron",
            "no vuelvo a caer", "ya me pas√≥ una vez", "eso me pas√≥ antes",
            "no me sale el mensaje", "no me abre el link", "no salta el mensaje",
            "me da cosa pagar", "no puedo pagar sin saber", "no mando dinero as√≠",
            "no conozco su tienda", "no estoy seguro", "como s√© que es real",
            "como s√© que es confiable", "como saber si es real", "esto es confiable?",
            "no tengo pruebas", "es seguro esto?", "no me siento c√≥modo pagando",
            "mejor contraentrega", "yo solo pago al recibir", "yo no pago antes",
            "a m√≠ me han estafado", "me estafaron antes", "me robaron antes",
            "y si no me llega", "y si no llega", "y si me estafan", "y si es falso",
            "ya me tumbaron plata", "me hicieron perder plata", "me quitaron la plata",
            "me da miedo que me estafen", "esto no parece seguro", "no se ve seguro",
            "y si es mentira", "y si es estafa", "y si no me mandan nada",
            "yo no pago sin ver", "yo no mando plata as√≠", "yo no conf√≠o en eso",
            "esto parece raro", "y si no cumplen", "y si no es verdad",
            "parece una estafa", "se ve raro", "esto huele a estafa", "muy sospechoso",
            "no quiero perder plata", "no me arriesgo", "no voy a arriesgar mi dinero"
        ]

        if any(frase in texto_normalizado for frase in frases_desconfianza):
            video_path = "/var/data/videos/video_confianza.mp4"

            await ctx.bot.send_message(
                chat_id=cid,
                text="ü§ù Entendemos tu preocupaci√≥n. Te compartimos este video para que veas que somos una tienda real y seria.",
                parse_mode="Markdown"
            )

            if os.path.exists(video_path):
                with open(video_path, "rb") as f:
                    b64 = base64.b64encode(f.read()).decode("utf-8")

                return {
                    "type": "video",
                    "base64": b64,
                    "mimetype": "video/mp4",
                    "filename": "video_confianza.mp4",
                    "text": "¬°Estamos aqu√≠ para ayudarte en lo que necesites! üëü‚ú®"
                }
            else:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text="üìπ No pudimos cargar el video en este momento, pero puedes confiar en nosotros. ¬°Llevamos a√±os vendiendo con √©xito!",
                    parse_mode="Markdown"
                )

            await reanudar_fase_actual(cid, ctx, est)
            return



    # FAQ‚ÄØ5: ¬øD√≥nde est√°n ubicados?
    if est.get("fase") not in ("editando_dato", "esperando_direccion", "confirmar_datos_guardados"):
        if any(frase in txt for frase in (
            "donde estan ubicados", "donde queda", "ubicacion", "ubicaci√≥n",
            "direccion", "direcci√≥n", "donde estan", "donde es la tienda",
            "estan ubicados", "ubicados en donde", "en que ciudad estan", "en que parte estan"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üìç Estamos en *Bucaramanga, Santander*.\n\n"
                    "üè° *Barrio San Miguel, Calle 52 #16-74*\n\n"
                    "üöö ¬°Enviamos a todo Colombia con Servientrega!\n\n"
                    "Ubicaci√≥n Google Maps: https://maps.google.com/?q=7.109500,-73.121597"
                ),
                parse_mode="Markdown"
            )
            await reanudar_fase_actual(cid, ctx, est)
            return

        # FAQ‚ÄØ6: ¬øSon nacionales o importados?
        if any(frase in txt for frase in (
            "son nacionales", "son importados", "es nacional o importado",
            "nacionales o importados", "hecho en colombia", "fabricados en colombia",
            "son de aqui", "es de colombia", "fabricacion colombiana"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üá®üá¥ Nuestra marca es *100 % colombiana* y las zapatillas "
                    "se elaboran con orgullo en *Bucaramanga* por artesanos locales."
                ),
                parse_mode="Markdown"
            )
            await reanudar_fase_actual(cid, ctx, est)
            return


    # FAQ 7: ¬øSon originales?
    if any(frase in txt for frase in (
        "son originales", "es original", "originales",
        "es copia", "son copia", "son replica", "r√©plica", "imitacion"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ ¬°Claro! Son *originales*. Somos *X100*, marca 100 % colombiana reconocida por su calidad y dise√±o.",
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return

    # FAQ 8: ¬øDe qu√© calidad son?
    if any(frase in txt for frase in (
        "que calidad son", "de que calidad son", "son buena calidad", "son de buena calidad",
        "son de mala calidad", "que calidad manejan", "que calidad tienen", "calidad de las zapatillas"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "‚ú® Nuestras zapatillas est√°n elaboradas con *materiales de alta calidad*.\n\n"
                "Cada par se fabrica cuidadosamente para asegurar *calidad AAA* üëüüîù, "
                "garantizando comodidad, durabilidad y excelente acabado."
            ),
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return

    # FAQ 9: ¬øHay descuento si compro 2 pares?
    if any(frase in txt for frase in (
        "si compro 2 pares", "dos pares descuento", "descuento por 2 pares",
        "descuento por dos pares", "me descuentan si compro dos", "descuento si compro dos",
        "hay descuento por dos", "promocion dos pares", "descuento en 2 pares"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üéâ ¬°S√≠! Si compras *2 pares* te damos un *10% de descuento adicional* sobre el total.\n\n"
                "¬°Aprovecha para estrenar m√°s y pagar menos! üî•üëüüëü"
            ),
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return

    # FAQ 10: ¬øManejan precios para mayoristas?
    if any(frase in txt for frase in (
        "precio mayorista", "precios para mayoristas", "mayorista", "quiero vender",
        "puedo venderlos", "descuento para revender", "revender", "comprar para vender",
        "manejan precios para mayoristas", "mayoreo", "venta al por mayor"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üõçÔ∏è ¬°Claro! Manejamos *precios para mayoristas* en pedidos de *6 pares en adelante*, "
                "sin importar tallas ni referencias.\n\n"
                "Condici√≥n: vender m√≠nimo al mismo precio que nosotros para cuidar el mercado."
            ),
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return

    # FAQ 11: ¬øLas tallas son normales o grandes?
    if any(frase in txt for frase in (
        "las tallas son normales", "horma normal", "talla normal",
        "horma grande", "horma peque√±a", "tallas grandes", "tallas peque√±as",
        "las tallas son grandes", "las tallas son peque√±as", "como son las tallas"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üëü Nuestra horma es *normal*. Si calzas talla *40* nacional, te queda bien la *40* de nosotros.\n\n"
                "Para mayor seguridad, puedes enviarnos una foto de la *etiqueta interna* de tus tenis actuales üìè‚ú®."
            ),
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return

    # FAQ 12: ¬øCu√°l es la talla m√°s grande que manejan?
    if any(frase in txt for frase in (
        "talla mas grande", "talla m√°s grande", "cual es la talla mas grande",
        "hasta que talla llegan", "mayor talla", "talla maxima", "talla m√°xima"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üìè La talla m√°s grande que manejamos es:\n\n"
                "‚Ä¢ *45 Nacional* üá®üá¥\n"
                "‚Ä¢ *47 Europeo* üá™üá∫\n\n"
                "¬°Tambi√©n tenemos opciones para pies grandes! üëü‚ú®"
            ),
            parse_mode="Markdown"
        )
        await reanudar_fase_actual(cid, ctx, est)
        return


    # üì∑ Si el usuario env√≠a una foto (detectamos modelo autom√°ticamente)
    if update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        # ‚ûú convert to base64 y usar CLIP
        with open(tmp, "rb") as f_img:
            base64_img = base64.b64encode(f_img.read()).decode("utf-8")
        os.remove(tmp)

        mensaje = await identificar_modelo_desde_imagen(base64_img)

        if "coincide con *" in mensaje.lower():
            modelo_detectado = re.findall(r"\*(.*?)\*", mensaje)
            if modelo_detectado:
                p = modelo_detectado[0].split("_")
                est.update({
                    "marca": p[0] if len(p) > 0 else "Desconocida",
                    "modelo": p[1] if len(p) > 1 else "Desconocido",
                    "color": p[2] if len(p) > 2 else "Desconocido",
                    "fase": "imagen_detectada",
                })
            await ctx.bot.send_message(
                chat_id=cid,
                text=mensaje + "\n¬øContinuamos? (SI/NO)",
                reply_markup=menu_botones(["SI", "NO"]),
                parse_mode="Markdown"
            )
        else:
            reset_estado(cid)
            await ctx.bot.send_message(
                chat_id=cid,
                text="üòï No reconoc√≠ el modelo. Puedes intentar con otra imagen o escribir /start.",
                parse_mode="Markdown"
            )
        return

    # üì∏ Imagen detectada ‚Äî responder con modelo, color y PRECIO
    if est.get("fase", "") in ("", "inicio", "imagen_detectada") and 'path_local' in locals():
        resultado = identificar_modelo_desde_clip(path_local)
        if resultado:
            modelo_detectado, color_detectado = resultado
            est["modelo"] = modelo_detectado
            est["color"] = color_detectado
            est["fase"] = "imagen_detectada"

            precio = next(
                (i["precio"] for i in inv if
                 normalize(i["marca"]) == normalize(est.get("marca", "")) and
                 normalize(i["modelo"]) == normalize(modelo_detectado) and
                 normalize(i["color"]) == normalize(color_detectado)),
                None
            )
            est["precio_total"] = int(precio) if precio else None

            mensaje = (
                f"üì∏ La imagen coincide con *{modelo_detectado}* color *{color_detectado}*.\n"
                f"‚úÖ ¬øConfirmas que es el modelo que deseas?"
            )
            if precio:
                mensaje += f"\nüí∞ Ese modelo tiene un precio de *${precio}* COP."

            mensaje += "\n\nResponde *s√≠* para continuar o *no* para elegir otro modelo."

            await ctx.bot.send_message(chat_id=cid, text=mensaje, parse_mode="Markdown")
            return


    # üì∑ Confirmaci√≥n si la imagen detectada fue correcta
    if est.get("fase") == "imagen_detectada":
        if any(frase in txt for frase in ("si", "s√≠", "s", "claro", "claro que s√≠", "quiero comprar", "continuar", "vamos")):
            est["fase"] = "esperando_talla"
            tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
            if isinstance(tallas, (int, float, str)):
                tallas = [str(tallas)]

            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"Tenemos las siguientes tallas disponibles para el modelo *{est['modelo']}* color *{est['color']}*?\n\n"
                    f"üëâ Opciones: {', '.join(tallas)}"
                ),
                parse_mode="Markdown"
            )
            return
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="Cancelado. /start para reiniciar o cu√©ntame si quieres ver otra referencia. üìã",
                parse_mode="Markdown"
            )
            reset_estado(cid)
            return

    # üõí Flujo manual si est√° buscando modelo
    if est.get("fase") == "esperando_modelo":
        modelos = obtener_modelos_por_marca(inv, est["marca"])
        if txt in map(normalize, modelos):
            est["modelo"] = next(m for m in modelos if normalize(m) == txt)
            est["fase"] = "esperando_color"
            colores = obtener_colores_por_modelo(inv, est["modelo"])
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øQu√© color deseas?",
                reply_markup=menu_botones(colores),
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="Elige un modelo v√°lido.",
                reply_markup=menu_botones(modelos),
            )
        return

    # üé® Elegir color del modelo
    if est.get("fase") == "esperando_color":
        colores = obtener_colores_por_modelo(inv, est["modelo"])
        if isinstance(colores, (int, float, str)):
            colores = [str(colores)]

        # Normalizar entrada y colores
        colores_normalizados = {normalize(c): c for c in colores}
        entrada_normalizada = normalize(txt)
        coincidencias = difflib.get_close_matches(entrada_normalizada, colores_normalizados.keys(), n=1, cutoff=0.6)

        if coincidencias:
            color_seleccionado = colores_normalizados[coincidencias[0]]
            est["color"] = color_seleccionado
            est["fase"] = "esperando_talla"

            tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
            if isinstance(tallas, (int, float, str)):
                tallas = [str(tallas)]

            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"Tenemos las siguientes tallas disponibles para el modelo *{est['modelo']}* color *{est['color']}*?\n\n"
                    f"üëâ Tallas disponibles: {', '.join(tallas)}"
                ),
                parse_mode="Markdown"
            )
        else:
            colores_str = "\n".join(f"- {c}" for c in colores)
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"‚ö†Ô∏è No entend√≠ ese color.\n\n"
                    f"üé® Los colores disponibles para *{est['modelo']}* son:\n\n"
                    f"{colores_str}\n\n"
                    "¬øCu√°l color te interesa?"
                ),
                parse_mode="Markdown"
            )
        return

    # üëü Elegir talla
    if est.get("fase") == "esperando_talla":
        tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
        if isinstance(tallas, (int, float, str)):
            tallas = [str(tallas)]

        talla_detectada = detectar_talla(txt_raw, tallas)

        if talla_detectada:
            est["talla"] = talla_detectada

        # üîç Ver si ya hay memoria del cliente
        cliente = obtener_datos_cliente(numero)

        if cliente:
            nombre    = cliente.get("nombre", "cliente")
            correo    = cliente.get("correo", "No registrado")
            telefono  = cliente.get("telefono", numero)
            cedula    = cliente.get("cedula", "No registrada")
            ciudad    = cliente.get("ciudad", "No registrada")
            provincia = cliente.get("provincia", "No registrada")
            direccion = cliente.get("direccion", "No registrada")

            est.update({
                "nombre": nombre,
                "correo": correo,
                "telefono": telefono,
                "cedula": cedula,
                "ciudad": ciudad,
                "provincia": provincia,
                "direccion": direccion
            })

            precio = next(
                (i["precio"] for i in inv
                 if normalize(i["marca"]) == normalize(est["marca"])
                 and normalize(i["modelo"]) == normalize(est["modelo"])
                 and normalize(i["color"]) == normalize(est["color"])),
                None
            )
            est["precio_total"] = int(precio) if precio else 0
            est["sale_id"] = generate_sale_id()

            resumen = (
                f"‚úÖ Pedido: {est['sale_id']}\n"
                f"üë§Nombre: {nombre}\n"
                f"üìßCorreo: {correo}\n"
                f"üì±Celular: {telefono}\n"
                f"ü™™C√©dula: {cedula}\n"
                f"üìçDirecci√≥n: {direccion}, {ciudad}, {provincia}\n"
                f"üëüProducto: {est['modelo']} color {est['color']} talla {est['talla']}\n"
                f"üí≤Valor a pagar: {est['precio_total']:,} COP\n\n"
                "¬øEstos datos siguen siendo correctos o deseas cambiar algo?"
            )

            est["fase"] = "confirmar_datos_guardados"
            estado_usuario[cid] = est
            await ctx.bot.send_message(chat_id=cid, text=resumen, parse_mode="Markdown")
            return

        # üßæ No hay cliente guardado ‚Üí continuar normal
        est["fase"] = "esperando_nombre"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øTu nombre completo para el pedido?",
            parse_mode="Markdown"
        )
        return

    # üë§ Confirmar o editar datos guardados
    if est.get("fase") == "confirmar_datos_guardados":
        if any(p in txt for p in (
            "todo bien", "todo correcto", "est√° bien", "esta bien",
            "correcto", "ok", "listo", "si", "s√≠", "vale", "dale"
        )):
            est["fase"] = "esperando_pago"
            precio = est.get("precio_total", 0)
            est["sale_id"] = est.get("sale_id") or generate_sale_id()

            est["resumen"] = {
                "N√∫mero Venta": est["sale_id"],
                "Fecha Venta": datetime.now().isoformat(),
                "Cliente": est.get("nombre"),
                "Tel√©fono": est.get("telefono"),
                "C√©dula": est.get("cedula"),
                "Producto": est.get("modelo"),
                "Color": est.get("color"),
                "Talla": est.get("talla"),
                "Correo": est.get("correo"),
                "Pago": None,
                "Estado": "PENDIENTE"
            }

            msg = (
                f"‚úÖ Pedido: {est['sale_id']}\n"
                f"üë§Nombre: {est['nombre']}\n"
                f"üìßCorreo: {est['correo']}\n"
                f"üì±Celular: {est['telefono']}\n"
                f"üìçDirecci√≥n: {est['direccion']}, {est['ciudad']}, {est['provincia']}\n"
                f"üëüProducto: {est['modelo']} color {est['color']} talla {est['talla']}\n"
                f"üí≤Valor a pagar: {precio:,} COP\n\n"
                "¬øC√≥mo deseas hacer el pago?\n"
                "‚Ä¢ üí∏ *Contraentrega*: adelanta 35‚ÄØ000‚ÄØCOP (se descuenta del total).\n"
                "‚Ä¢ üí∞ *Transferencia*: paga completo hoy y obt√©n 5‚ÄØ% de descuento.\n\n"
                "Escribe *Transferencia* o *Contraentrega*."
            )
            await ctx.bot.send_message(chat_id=cid, text=msg, parse_mode="Markdown")
            estado_usuario[cid] = est
            return

        # B) Detectar qu√© campo desea cambiar
        campos = {
            "nombre": ["nombre"],
            "correo": ["correo", "email", "mail"],
            "telefono": ["telefono", "tel√©fono", "celular", "cel"],
            "cedula": ["cedula", "c√©dula", "dni", "id"],
            "ciudad": ["ciudad"],
            "provincia": ["provincia", "departamento"],
            "direccion": ["direccion", "direcci√≥n", "dir"]
        }
        for campo, alias in campos.items():
            if any(a in txt for a in alias):
                est["campo_a_editar"] = campo
                est["fase"] = "editando_dato"
                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"Por favor escribe el nuevo *{campo}* üìù",
                    parse_mode="Markdown"
                )
                return

        await ctx.bot.send_message(
            chat_id=cid,
            text="Ind√≠came qu√© dato deseas cambiar (nombre, correo, tel√©fono, ciudad, etc.).",
            parse_mode="Markdown"
        )
        return

    # üíæ Guardar nuevo valor editado
    if est.get("fase") == "editando_dato":
        campo = est.get("campo_a_editar")

        if campo == "correo" and not re.match(r"[^@]+@[^@]+\.[^@]+", txt_raw):
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è Ese correo no parece v√°lido. Intenta con nombre@dominio.com",
                parse_mode="Markdown"
            )
            return
        if campo == "telefono" and not re.match(r"^\+?\d{7,15}$", txt_raw):
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è Ese tel√©fono no es v√°lido. Incluye solo n√∫meros y, opcional, el +57.",
                parse_mode="Markdown"
            )
            return

        est[campo] = txt_raw.strip()
        est.pop("campo_a_editar", None)
        est["fase"] = "confirmar_datos_guardados"

        resumen = (
            f"üîÑ *Datos actualizados:*\n\n"
            f"üë§Nombre: {est.get('nombre')}\n"
            f"üìßCorreo: {est.get('correo')}\n"
            f"üì±Celular: {est.get('telefono')}\n"
            f"ü™™C√©dula: {est.get('cedula')}\n"
            f"üìçDirecci√≥n: {est.get('direccion')}, {est.get('ciudad')}, {est.get('provincia')}\n"
            f"üëüProducto: {est['modelo']} color {est['color']} talla {est['talla']}\n"
            f"üí≤Valor a pagar: {est['precio_total']:,} COP\n\n"
            "¬øTodo correcto o quieres cambiar otro dato?"
        )
        await ctx.bot.send_message(chat_id=cid, text=resumen, parse_mode="Markdown")
        return



    # ‚úèÔ∏è Nombre del cliente
    if est.get("fase") == "esperando_nombre":
        est["nombre"] = txt_raw
        est["fase"] = "esperando_correo"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øCu√°l es tu correo electr√≥nico? üìß",
            parse_mode="Markdown"
        )
        return



    # ‚úèÔ∏è Nombre del cliente
    if est.get("fase") == "esperando_nombre":
        est["nombre"] = txt_raw
        est["fase"] = "esperando_correo"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øCu√°l es tu correo electr√≥nico? üìß",
            parse_mode="Markdown"
        )
        return

    # üìß Correo del cliente
    if est.get("fase") == "esperando_correo":
        if re.match(r"[^@]+@[^@]+\.[^@]+", txt_raw):
            est["correo"] = txt_raw
            est["fase"] = "esperando_telefono"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øTu n√∫mero de tel√©fono? üì±",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏èMandame un correo real porfavor.",
                parse_mode="Markdown"
            )
        return

    # üìû Tel√©fono del cliente
    if est.get("fase") == "esperando_telefono":
        if re.match(r"^\+?\d{7,15}$", txt_raw):
            est["telefono"] = txt_raw
            est["fase"] = "esperando_cedula"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øTu n√∫mero de c√©dula? ü™™",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="Este no parece un telefono real manda el tuyo porfa.",
                parse_mode="Markdown"
            )
        return

    # ü™™ C√©dula del cliente
    if est.get("fase") == "esperando_cedula":
        if re.match(r"^\d{5,15}$", txt_raw):
            est["cedula"] = txt_raw
            est["fase"] = "esperando_ciudad"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øEn qu√© ciudad est√°s? üèôÔ∏è",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è Tu cedula real para el pedido porfavor.",
                parse_mode="Markdown"
            )
        return

    # üåÜ Ciudad del cliente
    if est.get("fase") == "esperando_ciudad":
        est["ciudad"] = txt_raw
        est["fase"] = "esperando_provincia"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øEn qu√© departamento o provincia est√°s? üèûÔ∏è",
            parse_mode="Markdown"
        )
        return

    # üèûÔ∏è Provincia del cliente
    if est.get("fase") == "esperando_provincia":
        est["provincia"] = txt_raw
        est["fase"] = "esperando_direccion"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øDirecci√≥n exacta de env√≠o? üè°",
            parse_mode="Markdown"
        )
        return

    # üè° Direcci√≥n de env√≠o
    if est.get("fase") == "esperando_direccion":
        est["direccion"] = txt_raw.strip()

        # Guardar cliente
        actualizar_cliente(numero, {
            "nombre": est.get("nombre"),
            "correo": est.get("correo"),
            "telefono": est.get("telefono"),
            "cedula": est.get("cedula"),
            "ciudad": est.get("ciudad"),
            "provincia": est.get("provincia"),
            "direccion": est.get("direccion")
        })

        precio = next(
            (
                i["precio"] for i in inv
                if normalize(i["marca"]) == normalize(est["marca"])
                and normalize(i["modelo"]) == normalize(est["modelo"])
                and normalize(i["color"]) == normalize(est["color"])
            ),
            None
        )
        if precio is None:
            await ctx.bot.send_message(
                chat_id=cid,
                text="No pude obtener el precio, intenta de nuevo."
            )
            return

        est["precio_total"] = int(precio)
        est.setdefault("talla", "‚Äî")
        est["sale_id"] = est.get("sale_id") or generate_sale_id()

        est["resumen"] = {
            "N√∫mero Venta": est["sale_id"],
            "Fecha Venta": datetime.now().isoformat(),
            "Cliente": est["nombre"],
            "Tel√©fono": est["telefono"],
            "C√©dula": est["cedula"],
            "Producto": est["modelo"],
            "Color": est["color"],
            "Talla": est["talla"],
            "Correo": est["correo"],
            "Pago": None,
            "Estado": "PENDIENTE"
        }

        msg = (
            f"‚úÖ Pedido: {est['sale_id']}\n"
            f"üë§Nombre: {est['nombre']}\n"
            f"üìßCorreo: {est['correo']}\n"
            f"üì±Celular: {est['telefono']}\n"
            f"üìçDirecci√≥n: {est['direccion']}, {est['ciudad']}, {est['provincia']}\n"
            f"üëüProducto: {est['modelo']} color {est['color']} talla {est['talla']}\n"
            f"üí≤Valor a pagar: {est['precio_total']:,} COP\n\n"
            "¬øC√≥mo deseas hacer el pago?\n"
            "‚Ä¢ üí∏ *Contraentrega*: adelanta 35‚ÄØ000‚ÄØCOP (se descuenta del total).\n"
            "‚Ä¢ üí∞ *Transferencia*: paga completo hoy y obt√©n 5‚ÄØ% de descuento.\n\n"
            "Escribe *Transferencia* o *Contraentrega*."
        )
        await ctx.bot.send_message(chat_id=cid, text=msg, parse_mode="Markdown")
        est["fase"] = "esperando_pago"
        estado_usuario[cid] = est
        return

    # üí≥ M√©todo de pago
    if est.get("fase") == "esperando_pago":
        opciones = {
            "transferencia": ["transferencia", "trasferencia", "transf", "trans", "pago inmediato", "qr"],
            "contraentrega": ["contraentrega", "contra entrega", "contra", "contrapago"]
        }
        txt_normalizado = normalize(txt_raw)
        metodo_detectado = None
        for metodo, alias in opciones.items():
            if difflib.get_close_matches(txt_normalizado, alias, n=1, cutoff=0.6):
                metodo_detectado = metodo
                break

        if not metodo_detectado:
            await ctx.bot.send_message(
                chat_id=cid,
                text="üí≥ No entend√≠ el m√©todo de pago. Escribe *transferencia* o *contraentrega* üòä",
                parse_mode="Markdown"
            )
            return

        resumen = est["resumen"]
        precio_original = est["precio_total"]

        if metodo_detectado == "transferencia":
            est["fase"] = "esperando_comprobante"
            est["metodo_pago"] = "Transferencia"
            descuento = round(precio_original * 0.05)
            valor_final = precio_original - descuento

            resumen.update({
                "Pago": "Transferencia",
                "Descuento": f"-{descuento} COP",
                "Valor Final": valor_final
            })

            msg = (
                "üü¢ Elegiste *TRANSFERENCIA*.\n\n"
                f"üí∞ Valor original: {precio_original:,} COP\n"
                f"üéâ Descuento 5‚ÄØ%: -{descuento:,} COP\n"
                f"‚úÖ Total a pagar: {valor_final:,} COP\n\n"
                "üí≥ Cuentas:\n"
                "- Bancolombia 30300002233 (X100‚ÄØSAS)\n"
                "- Nequi 317‚ÄØ717‚ÄØ1171\n"
                "- Daviplata 300‚ÄØ414‚ÄØ1021\n\n"
                "üì∏ Env√≠a aqu√≠ la foto del comprobante."
            )
            await ctx.bot.send_message(chat_id=cid, text=msg, parse_mode="Markdown")

        else:
            est["fase"] = "esperando_comprobante"
            est["metodo_pago"] = "Contraentrega"
            resumen.update({
                "Pago": "Contra entrega",
                "Valor Anticipo": 35000
            })

            msg = (
                "üü° Elegiste *CONTRAENTREGA*.\n\n"
                "Debes adelantar *35‚ÄØ000‚ÄØCOP* para el env√≠o (se descuenta del total).\n\n"
                "üí≥ Cuentas:\n"
                "- Bancolombia 30300002233 (X100‚ÄØSAS)\n"
                "- Nequi 317‚ÄØ717‚ÄØ1171\n"
                "- Daviplata 300‚ÄØ414‚ÄØ1021\n\n"
                "üì∏ Env√≠a aqu√≠ la foto del comprobante."
            )
            await ctx.bot.send_message(chat_id=cid, text=msg, parse_mode="Markdown")

        estado_usuario[cid] = est
        return

    # üì∏ Recibir comprobante de pago
    if est.get("fase") == "esperando_comprobante" and update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}_proof.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        with io.open(tmp, "rb") as image_file:
            content = image_file.read()
        image = vision.Image(content=content)
        response = vision_client.text_detection(image=image)
        textos_detectados = response.text_annotations

        texto_extraido = textos_detectados[0].description if textos_detectados else ""
        print("üßæ TEXTO EXTRA√çDO:\n", texto_extraido)

        if not es_comprobante_valido(texto_extraido):
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è El comprobante no parece v√°lido. Aseg√∫rate de que sea legible y que diga *Pago exitoso*.",
                parse_mode="Markdown"
            )
            os.remove(tmp)
            return

        registrar_orden(est["resumen"])

        enviar_correo(
            est["correo"],
            f"Pago recibido {est['resumen']['N√∫mero Venta']}",
            json.dumps(est["resumen"], indent=2)
        )
        enviar_correo_con_adjunto(
            EMAIL_JEFE,
            f"Comprobante {est['resumen']['N√∫mero Venta']}",
            json.dumps(est["resumen"], indent=2),
            tmp
        )
        os.remove(tmp)

        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ ¬°Pago registrado exitosamente! Tu pedido est√° en proceso. üöö"
        )

        await enviar_sticker(ctx, cid, "sticker_fin_de_compra_gracias.webp")

        reset_estado(cid)
        estado_usuario.pop(cid, None)
        return




    # üöö Rastrear pedido
    if est.get("fase") == "esperando_numero_rastreo":
        await ctx.bot.send_message(
            chat_id=cid,
            text="üì¶ Puedes rastrear tu pedido aqu√≠:\nhttps://www.instagram.com/juanp_ocampo/",
            parse_mode="Markdown"
        )
        reset_estado(cid)
        return

    # üîÑ Solicitud de devoluci√≥n
    if est.get("fase") == "esperando_numero_devolucion":
        est["referencia"] = txt_raw.strip()
        est["fase"] = "esperando_motivo_devolucion"
        await ctx.bot.send_message(
            chat_id=cid,
            text="üìù ¬øCu√°l es el motivo de la devoluci√≥n?",
            parse_mode="Markdown"
        )
        return

    if est.get("fase") == "esperando_motivo_devolucion":
        enviar_correo(
            EMAIL_DEVOLUCIONES,
            f"Solicitud de Devoluci√≥n {NOMBRE_NEGOCIO}",
            f"Venta: {est['referencia']}\nMotivo: {txt_raw}"
        )
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ Solicitud de devoluci√≥n enviada exitosamente.",
            parse_mode="Markdown"
        )
        reset_estado(cid)
        return

    # üéôÔ∏è Procesar audio
    if update.message.voice or update.message.audio:
        fobj = update.message.voice or update.message.audio
        tg_file = await fobj.get_file()
        local_path = os.path.join(TEMP_AUDIO_DIR, f"{cid}_{tg_file.file_id}.ogg")
        await tg_file.download_to_drive(local_path)
        txt_raw = await transcribe_audio(local_path)
        os.remove(local_path)

        if not txt_raw:
            await update.message.reply_text(
                "Ese audio se escucha muy mal üòï. ¬øPodr√≠as enviarlo de nuevo o escribir tu mensaje?",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        txt = normalize(txt_raw)

    # üñºÔ∏è Intenci√≥n global de imagen
    if menciona_imagen(txt):
        if est.get("fase") != "esperando_imagen":
            est["fase"] = "esperando_imagen"
            await update.message.reply_text(CLIP_INSTRUCTIONS, reply_markup=ReplyKeyboardRemove())
        return

    # üí¨ Manejar precio por referencia
    if await manejar_precio(update, ctx, inv):
        return

    # üõí Confirmaci√≥n para continuar con compra despu√©s de ver precios
    if est.get("fase") == "confirmar_compra":
        if txt in ("si", "s√≠", "si quiero comprar", "s√≠ quiero comprar", "quiero comprar", "comprar", "dale", "SI", "De una", "claro"):
            modelo = est.get("modelo_confirmado")
            color_confirmado = est.get("color_confirmado")

            if not modelo:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text="‚ùå No encontr√© el modelo que seleccionaste. Vuelve a escribirlo o env√≠ame una imagen.",
                    parse_mode="Markdown"
                )
                est["fase"] = "inicio"
                estado_usuario[cid] = est
                return

            est["modelo"] = modelo

            colores = obtener_colores_por_modelo(inv, modelo)
            if isinstance(colores, (int, float, str)):
                colores = [str(colores)]

            if len(colores) == 1:
                est["color"] = colores[0]
                est["fase"] = "esperando_talla"
                tallas = obtener_tallas_por_color(inv, modelo, colores[0])
                if isinstance(tallas, (int, float, str)):
                    tallas = [str(tallas)]

                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"Tenemos las siguientes tallas disponibles para el modelo *{modelo}* color *{colores[0]}*?\nüëâ Tallas disponibles: {', '.join(tallas)}",
                    parse_mode="Markdown"
                )
            else:
                est["fase"] = "esperando_color"
                colores_str = "\n".join(f"- {c}" for c in colores)
                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"üé® El modelo *{modelo}* est√° disponible en varios colores:\n\n{colores_str}\n\n¬øCu√°l color te interesa?",
                    parse_mode="Markdown"
                )

            estado_usuario[cid] = est
            return

        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="No hay problema. Si deseas, puedes ver nuestro cat√°logo completo üìã.\nüëâ https://wa.me/c/573246666652",
                parse_mode="Markdown"
            )
            est["fase"] = "inicio"
            estado_usuario[cid] = est
            return


    # üîÑ Si el usuario dice ‚Äús√≠‚Äù antes de confirmar compra (por fuera del flujo)
    if "s√≠" in txt_raw or "claro" in txt_raw or "dale" in txt_raw or "quiero" in txt_raw:
        modelo = est.get("modelo_confirmado")
        if not modelo:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ùå No encontr√© el modelo que seleccionaste. Vuelve a escribirlo o env√≠ame una imagen.",
                parse_mode="Markdown"
            )
            est["fase"] = "inicio"
            return

        colores = obtener_colores_por_modelo(inventario, modelo)

        # Caso √∫nico color
        if len(colores) == 1:
            est["modelo"] = modelo
            est["color"] = colores[0]
            est["fase"] = "esperando_talla"

            tallas = obtener_tallas_por_color(inventario, modelo, colores[0])
            await ctx.bot.send_message(
                chat_id=cid,
                text=f"Perfecto üëå ¬øQu√© talla deseas para el modelo *{modelo}* color *{colores[0]}*? üëüüìè",
                parse_mode="Markdown",
                reply_markup=menu_botones(tallas),
            )
            return

        # Caso m√∫ltiples colores
        est["modelo"] = modelo
        est["fase"] = "esperando_color"

        await ctx.bot.send_message(
            chat_id=cid,
            text=f"üé® ¬øQu√© color deseas para el modelo *{modelo}*?",
            parse_mode="Markdown",
            reply_markup=menu_botones(colores),
        )
        return


    # üîí Video de confianza si desconf√≠a
    if any(frase in txt for frase in (
        "no me fio", "no confio", "es seguro", "como se que no me roban",
        "como se que no me estafan", "desconfio", "no creo", "estafa", "miedo a comprar"
    )):
        VIDEO_DRIVE_ID = "TU_ID_DEL_VIDEO_DE_CONFIANZA"
        video_url = f"https://drive.google.com/uc?id={VIDEO_DRIVE_ID}"

        await ctx.bot.send_chat_action(chat_id=cid, action=ChatAction.UPLOAD_VIDEO)
        await ctx.bot.send_video(
            chat_id=cid,
            video=video_url,
            caption=(
                "üîí Entendemos perfectamente tu preocupaci√≥n. "
                "Aqu√≠ te dejamos un video corto donde nuestros clientes reales comparten su experiencia. "
                "Somos una empresa seria y segura, ¬°puedes confiar en nosotros! üòäüëç"
            )
        )
        return


    if await manejar_catalogo(update, ctx):
        return

    # üñºÔ∏è Procesar imagen subida si estaba esperando
    if est.get("fase") == "esperando_imagen" and update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        with open(tmp, "rb") as f_img:
            base64_img = base64.b64encode(f_img.read()).decode("utf-8")
        os.remove(tmp)

        mensaje = await identificar_modelo_desde_imagen(base64_img)

        if "coincide con *" in mensaje.lower():
            modelo_detectado = re.findall(r"\*(.*?)\*", mensaje)
            if modelo_detectado:
                p = modelo_detectado[0].split("_")
                est.update({
                    "marca":  p[0] if len(p) > 0 else "Desconocida",
                    "modelo": p[1] if len(p) > 1 else "Desconocido",
                    "color":  p[2] if len(p) > 2 else "Desconocido",
                    "fase":   "imagen_detectada",
                })
            await ctx.bot.send_message(
                chat_id=cid,
                text=mensaje + "\n¬øContinuamos? (SI/NO)",
                reply_markup=menu_botones(["SI", "NO"]),
                parse_mode="Markdown"
            )
        else:
            reset_estado(cid)
            await ctx.bot.send_message(
                chat_id=cid,
                text="üòï No reconoc√≠ el modelo en la imagen. Intenta con otra o escribe /start.",
                parse_mode="Markdown"
            )
        return

    # üõçÔ∏è Detectar marca escrita
    marcas = obtener_marcas_unicas(inv)
    elegida = next((m for m in marcas if any(t in txt for t in normalize(m).split())), None)

    if not elegida:
        tokens = txt.split()
        for m in marcas:
            for tok in normalize(m).split():
                if difflib.get_close_matches(tok, tokens, n=1, cutoff=0.6):
                    elegida = m
                    break
            if elegida:
                break

    if elegida:
        est["marca"] = elegida
        est["fase"] = "esperando_modelo"
        await ctx.bot.send_message(
            chat_id=cid,
            text=f"¬°Genial! Veo que buscas {elegida}. ¬øQu√© modelo de {elegida} te interesa?",
            reply_markup=menu_botones(obtener_modelos_por_marca(inv, elegida)),
        )
        return




     # ‚Äî‚Äî‚Äî Hasta aqu√≠ llega todo el flujo normal del bot ‚Äî‚Äî‚Äî

    # üî• Fallback inteligente CORREGIDO con 4 espacios

    # 1) Detectar palabras t√≠picas primero (antes que IA)
    palabras_clave_flujo = [
        "catalogo", "cat√°logo", "ver cat√°logo", "ver catalogo",
        "imagen", "foto", "enviar imagen", "ver tallas",
        "quiero comprar", "hacer pedido", "comprar", "zapatos", "tenis",
        "pago", "contraentrega", "garant√≠a", "garantia",
        "demora", "env√≠o", "envio"
    ]

    if any(palabra in txt for palabra in palabras_clave_flujo):
        await ctx.bot.send_message(
            chat_id=cid,
            text="üìã Parece que quieres hacer un pedido o consultar el cat√°logo. Usa las opciones disponibles üòâ",
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo", "Enviar imagen"])
        )
        return

    # 2) NO usar IA si estamos en una fase cr√≠tica (proteger cierre de venta)
    fases_criticas = [
        "esperando_talla", "esperando_color", "esperando_nombre", "esperando_correo",
        "esperando_telefono", "esperando_ciudad", "esperando_provincia", "esperando_direccion",
        "esperando_pago", "esperando_comprobante", "imagen_detectada",
        "esperando_video_referencia", "esperando_numero_rastreo",
        "esperando_numero_devolucion", "esperando_motivo_devolucion"
    ]

    if est.get("fase") in fases_criticas:
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úèÔ∏è Por favor completa primero el proceso en el que est√°s. ¬øTe ayudo a terminarlo?",
            reply_markup=menu_botones(["Volver al men√∫"])
        )
        return

    # 3) Ahora s√≠, usar IA si no entendimos nada
    respuesta_fallback = await responder_con_openai(txt_raw)
    if respuesta_fallback:
        await ctx.bot.send_message(
            chat_id=cid,
            text=respuesta_fallback,
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo", "Enviar imagen"])
        )
    else:
        await ctx.bot.send_message(
            chat_id=cid,
            text="üòÖ No logr√© entender tu solicitud. ¬øQuieres ver el cat√°logo o realizar un pedido?",
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo"])
        )
    return
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FUNCI√ìN AUXILIAR ‚Äì REANUDAR FASE
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def reanudar_fase_actual(cid, ctx, est):
    fase = est.get("fase")
    if fase == "esperando_nombre":
        await ctx.bot.send_message(chat_id=cid, text="¬øDime tu nombre completo para seguir la compra? ‚úçÔ∏è")
    elif fase == "esperando_correo":
        await ctx.bot.send_message(chat_id=cid, text="¬øDime cual es tu correo para seguir? üìß")
    elif fase == "esperando_telefono":
        await ctx.bot.send_message(chat_id=cid, text="¬øTu telefono celular para continuar? üì±")
    elif fase == "esperando_cedula":
        await ctx.bot.send_message(chat_id=cid, text="¬øDime la cedula para que sigamos ? ü™™")
    elif fase == "esperando_ciudad":
        await ctx.bot.send_message(chat_id=cid, text="¬øDime la ciudad para ya cerrar tu pedido? üèôÔ∏è")
    elif fase == "esperando_provincia":
        await ctx.bot.send_message(chat_id=cid, text="¬øDime el Departamento o provincia? üèûÔ∏è")
    elif fase == "esperando_direccion":
        await ctx.bot.send_message(chat_id=cid, text="¬øCual es entonces tu direccion para el pedido? üè°")

# Funci√≥n para manejar la solicitud de precio por referencia
PALABRAS_PRECIO = ['precio', 'vale', 'cuesta', 'valor', 'coste', 'precios', 'cu√°nto']

async def manejar_precio(update, ctx, inventario):
    cid = update.effective_chat.id
    mensaje = (update.message.text or "").lower()
    txt = normalize(mensaje)
    logging.debug(f"[manejar_precio] Mensaje recibido: {mensaje}")

    # Detectar referencia de 3 o 4 d√≠gitos
    m_ref = re.search(r"(?:referencia|modelo)?\s*(\d{3,4})", txt)
    if not m_ref:
        logging.debug("[manejar_precio] No se detect√≥ referencia en el mensaje.")
        return False

    referencia = m_ref.group(1)
    logging.debug(f"[manejar_precio] Referencia detectada: {referencia}")

    # Buscar productos que coincidan
    productos = [
        item for item in inventario
        if referencia in normalize(item.get("modelo", "")) and disponible(item)
    ]
    logging.debug(f"[manejar_precio] Productos encontrados con stock: {len(productos)}")

    if productos:
        from collections import defaultdict
        agrupados = defaultdict(set)

        for item in productos:
            try:
                precio_raw = str(item.get("precio", "0")).replace(".", "").replace("COP", "").strip()
                precio_formateado = f"{int(precio_raw):,}COP"
            except Exception as e:
                logging.error(f"[manejar_precio] Error formateando precio: {e}")
                precio_formateado = "No disponible"

            try:
                key = (
                    item.get("modelo", "desconocido"),
                    item.get("color", "varios colores"),
                    precio_formateado
                )
                agrupados[key].add(str(item.get("talla", "")))
            except Exception as e:
                logging.error(f"[manejar_precio] Error agrupando tallas: {e}")
        
        respuesta_final = ""
        primer_producto = productos[0]

        for (modelo, color, precio), tallas in agrupados.items():
            try:
                if not isinstance(tallas, (set, list, tuple)):
                    tallas = [str(tallas)]

                tallas_ordenadas = sorted(tallas, key=lambda t: int(t) if t.isdigit() else t)
                tallas_str = ", ".join(tallas_ordenadas)

                respuesta_final += (
                    f"üëü *{modelo}* ({color})\n"
                    f"üí≤ Precio: *{precio}*\n"
                    f"Tallas disponibles: {tallas_str}\n\n"
                )
            except Exception as e:
                logging.error(f"[manejar_precio] Error formateando tallas: {e}")

        # ‚úÖ Guardar estado de forma segura
        est = estado_usuario.get(cid, {})
        est["fase"] = "confirmar_compra"
        est["modelo_confirmado"] = primer_producto["modelo"]
        est["color_confirmado"] = primer_producto["color"]
        est["marca"] = primer_producto.get("marca", "sin marca")
        estado_usuario[cid] = est  # ‚úÖ GUARDA el estado correctamente

        logging.debug(f"[manejar_precio] Guardado modelo: {primer_producto['modelo']}, color: {primer_producto['color']}")

        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                f"Veo que est√°s interesado en nuestra referencia *{referencia}*:\n\n"
                f"{respuesta_final}"
                "Seguimos con la compra?\n\n"
            ),
            parse_mode="Markdown"
        )
        return True

    else:
        logging.debug("[manejar_precio] No se encontraron productos con esa referencia.")
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                f"üòï No encontr√© la referencia {referencia}. "
                "¬øQuieres revisar el cat√°logo?\n\n"
                "üëâ Opciones: Ver cat√°logo / Volver al men√∫"
            ),
            parse_mode="Markdown"
        )
        return True





   
# --------------------------------------------------------------------

nest_asyncio.apply()

# 2. Conversi√≥n de n√∫mero WhatsApp
def wa_chat_id(wa_from: str) -> str:
    return re.sub(r"\D", "", wa_from)

from openai import AsyncOpenAI

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def responder_con_openai(mensaje_usuario):
    try:
        respuesta = await client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Eres un asesor de ventas de la tienda de zapatos deportivos 'X100üî•üëü'. "
                        "Solo vendemos nuestra propia marca *X100* (no manejamos marcas como Skechers, Adidas, Nike, etc.). "
                        "Nuestros productos son 100% colombianos y hechos en Bucaramanga.\n\n"
                        "Tu objetivo principal es:\n"
                        "- Si preguntan por precio di, dime que referencia exacta buscas\n"
                        "- Siempre que puedas pedir la referencia del teni\n"
                        "- Pedir que env√≠e una imagen del zapato que busca üì∏\n"
                        "Siempre que puedas, invita amablemente al cliente a enviarte el n√∫mero de referencia o una imagen para agilizar el pedido.\n"
                        "Si el cliente pregunta por marcas externas, responde c√°lidamente explicando que solo manejamos X100 y todo es unisex.\n\n"
                        "Cuando no entiendas muy bien la intenci√≥n, ofrece opciones como:\n"
                        "- '¬øMe puedes enviar la referencia del modelo que te interesa? üìã‚ú®'\n"
                        "- '¬øQuieres enviarme una imagen para ayudarte mejor? üì∏'\n\n"
                        "Responde de forma C√ÅLIDA, POSITIVA, BREVE (m√°ximo 2 l√≠neas), usando emojis amistosos üéØüëüüöÄ‚ú®.\n"
                        "Act√∫a como un asesor de ventas que siempre busca ayudar al cliente y CERRAR la compra de manera r√°pida, amigable y eficiente."
                    )
                },
                {
                    "role": "user",
                    "content": mensaje_usuario
                }
            ],
            temperature=0.5,
            max_tokens=300
        )
        return respuesta.choices[0].message.content.strip()

    except Exception as e:
        logging.error(f"Error al consultar OpenAI: {e}")
        return "Disculpa, estamos teniendo un inconveniente en este momento. ¬øPuedes intentar de nuevo m√°s tarde?"
# üß≠ Manejo del cat√°logo si el usuario lo menciona
async def manejar_catalogo(update, ctx):
    cid = getattr(update, "from", None) or getattr(update.effective_chat, "id", "")
    txt = getattr(update.message, "text", "").lower()

    if menciona_catalogo(txt):
        mensaje = (
            "üõçÔ∏è ¬°Claro! Aqu√≠ tienes el cat√°logo m√°s reciente:\n"
            "üëâ https://wa.me/c/573007607245\n"
            "Si ves algo que te guste, solo dime el modelo o m√°ndame una foto üì∏"
        )
        await ctx.bot.send_message(chat_id=cid, text=mensaje)
        return True
    return False


import base64  # Aseg√∫rate de que est√© arriba del archivo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4. Procesar mensaje de WhatsApp
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def procesar_wa(cid: str, body: str, msg_id: str = "") -> dict:
    cid = str(cid)
    texto = body.lower() if body else ""
    txt = texto if texto else ""

    # ‚îÄ‚îÄ‚îÄ FILTRO 1: mensaje vac√≠o ‚îÄ‚îÄ‚îÄ
    if not body or not body.strip():
        print(f"[IGNORADO] Mensaje vac√≠o de {cid}")
        return {"type": "text", "text": ""}

    # ‚îÄ‚îÄ‚îÄ FILTRO 2: anti‚Äëduplicados (<30‚ÄØs) ‚îÄ‚îÄ‚îÄ
    DEDUP_WINDOW = 30
    now = time.time()
    info = ultimo_msg.get(cid)
    if info and msg_id and msg_id == info["id"] and now - info["t"] < DEDUP_WINDOW:
        print(f"[IGNORADO] Duplicado reciente de {cid}")
        return {"type": "text", "text": ""}
    if msg_id:
        ultimo_msg[cid] = {"id": msg_id, "t": now}

    # Funci√≥n auxiliar para codificar imagen como base64
    def codificar_base64(path, tipo='image/jpeg'):
        with open(path, "rb") as f:
            b64 = base64.b64encode(f.read()).decode("utf-8")
        return f"data:{tipo};base64,{b64}"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    class DummyCtx(SimpleNamespace):
        async def bot_send(self, chat_id, text, **kw):
            self.resp.append({"type": "text", "text": text})

        async def bot_send_chat_action(self, chat_id, action, **kw):
            pass

        async def bot_send_video(self, chat_id, video, caption=None, **kw):
            self.resp.append({
                "type": "video",
                "path": video.name,
                "text": caption or ""
            })

        async def bot_send_photo(self, chat_id, photo, caption=None, **kw):
            try:
                base64_img = codificar_base64(photo.name)
                self.resp.append({
                    "type": "photo",
                    "base64": base64_img,
                    "text": caption or ""
                })
            except Exception as e:
                self.resp.append({
                    "type": "text",
                    "text": f"‚ùå Error cargando imagen: {e}"
                })

    ctx = DummyCtx(resp=[])
    ctx.bot = SimpleNamespace(
        send_message=ctx.bot_send,
        send_chat_action=ctx.bot_send_chat_action,
        send_video=ctx.bot_send_video,
        send_photo=ctx.bot_send_photo
    )

    class DummyMsg(SimpleNamespace):
        def __init__(self, text, ctx, photo=None, voice=None, audio=None):
            self.text = text
            self.photo = photo
            self.voice = voice
            self.audio = audio
            self._ctx = ctx

        async def reply_text(self, text, **kw):
            self._ctx.resp.append({"type": "text", "text": text})

    dummy_msg = DummyMsg(text=body, ctx=ctx)
    dummy_update = SimpleNamespace(
        message=dummy_msg,
        effective_chat=SimpleNamespace(id=cid)
    )

    # üß† Inicializa estado si no existe
    if cid not in estado_usuario or not estado_usuario[cid].get("fase"):
        reset_estado(cid)
        estado_usuario[cid] = {"fase": "inicio"}

    # üí¨ Saludo / start
    if texto in ("/start", "start", "hola", "buenas", "hey"):
        reset_estado(cid)
        return {
            "type": "text",
            "text": ("¬°Bienvenido a *X100üî•üëü*!\n\n"
                     "Si tienes una foto puedes enviarla\n"
                     "Si tienes n√∫mero de referencia, env√≠amelo\n"
                     "¬øTe gustar√≠a ver unos videos de nuestras referencias?\n"
                     "Cu√©ntame sin problema üòÄ")
        }

    # üîä Petici√≥n de audio
    if any(f in txt for f in (
        "mandame un audio", "m√°ndame un audio", "env√≠ame un audio",
        "puede enviarme un audio", "puedes enviarme un audio", "me puedes enviar un audio",
        "h√°blame", "h√°bleme", "h√°blame por voz", "me puedes hablar",
        "leeme", "l√©eme", "no s√© leer", "no se leer", "no puedo leer"
    )):
        texto_respuesta = (
            "Hola üëã soy tu asistente. "
            "Cu√©ntame qu√© modelo deseas adquirir hoy."
        )

        try:
            ruta_audio = await generar_audio_openai(texto_respuesta, f"audio_{cid}.mp3")
            ruta_completa = os.path.join("temp", f"audio_{cid}.mp3")

            if ruta_audio and os.path.exists(ruta_completa):
                return {
                    "type": "audio",
                    "path": ruta_completa,
                    "text": "üéß Aqu√≠ tienes tu audio:"
                }
            else:
                return {
                    "type": "text",
                    "text": "‚ùå No pude generar el audio en este momento."
                }

        except Exception as e:
            logging.error(f"‚ùå Error generando o accediendo al audio: {e}")
            return {
                "type": "text",
                "text": "‚ùå Ocurri√≥ un problema generando el audio."
            }

    # ‚îÄ‚îÄ‚îÄ MAIN try/except ‚îÄ‚îÄ‚îÄ
    try:
        reply = await responder(dummy_update, ctx)

        # üü¢ Si responder() devuelve un dict (video/audio), lo mandamos directo
        if isinstance(reply, dict):
            return reply

        # üü¢ Si hay mensajes acumulados por ctx
        if ctx.resp:
            if len(ctx.resp) == 1:
                return ctx.resp[0]  # env√≠a solo la respuesta directa (texto, foto o video)
            else:
                return {"type": "multi", "messages": ctx.resp}

        # üü° Si est√° esperando pago o comprobante
        est = estado_usuario.get(cid, {})
        if est.get("fase") in ("esperando_pago", "esperando_comprobante"):
            return {"type": "text", "text": "üí¨ Espero tu m√©todo de pago o comprobante. üì∏"}

        # üîÅ Caso final: pasar a la IA
        respuesta_ia = await responder_con_openai(body)
        return {"type": "text", "text": respuesta_ia or "ü§ñ Estoy revisando el sistema‚Ä¶"}

    except Exception as e:
        print(f"üî• Error interno en procesar_wa(): {e}")
        try:
            respuesta_ia = await responder_con_openai(body)
            return {"type": "text", "text": respuesta_ia or "‚ö†Ô∏è Hubo un error inesperado. Intenta de nuevo."}
        except Exception as fallback_error:
            logging.error(f"[FALLBACK] Tambi√©n fall√≥ responder_con_openai: {fallback_error}")
            return {"type": "text", "text": "‚ö†Ô∏è Error inesperado. Por favor intenta m√°s tarde."}


@api.post("/venom")
async def venom_webhook(req: Request):
    """Webhook principal que recibe los mensajes de Venom y procesa imagen, audio o texto."""
    inv = obtener_inventario()

    try:
        data = await req.json()
        cid = wa_chat_id(data.get("from", ""))
        body = data.get("body", "") or ""
        mtype = (data.get("type") or "").lower()
        mimetype = (data.get("mimetype") or "").lower()

        logging.info(f"üì© Mensaje recibido ‚Äî CID:{cid} ‚Äî Tipo:{mtype} ‚Äî MIME:{mimetype}")

        if (
            data.get("isForwarded") or
            data.get("isNotification") or
            data.get("type") == "e2e_notification" or
            data.get("fromMe") or
            data.get("isSentByMe") or
            data.get("isGroupMsg") or
            not body
        ):
            logging.warning(f"[VENOM] Ignorado ‚Äî CID:{cid}")
            return {"status": "ignored"}

        # üñºÔ∏è IMAGEN
        if mtype == "image" or mimetype.startswith("image"):
            try:
                b64_str = body.split(",", 1)[1] if "," in body else body
                img_bytes = base64.b64decode(b64_str + "===")
                img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
                logging.info(f"‚úÖ Imagen decodificada correctamente. Tama√±o: {img.size}")
            except Exception as e:
                logging.error(f"‚ùå No pude leer la imagen: {e}")
                return JSONResponse({"type": "text", "text": "‚ùå No pude leer la imagen üòï"})

            est = estado_usuario.get(cid, {})
            fase = est.get("fase", "")
            logging.info(f"üîç Fase actual del usuario {cid}: {fase or 'NO DEFINIDA'}")

            # üìÑ COMPROBANTE
            if fase == "esperando_comprobante":
                try:
                    os.makedirs("temp", exist_ok=True)
                    temp_path = f"temp/{cid}_proof.jpg"
                    with open(temp_path, "wb") as f:
                        f.write(img_bytes)

                    texto = extraer_texto_comprobante(temp_path)
                    logging.info(f"[OCR] Texto extra√≠do (500 chars):\n{texto[:500]}")

                    if es_comprobante_valido(texto):
                        logging.info("‚úÖ Comprobante v√°lido por OCR")
                        resumen = est.get("resumen", {})
                        registrar_orden(resumen)

                        enviar_correo(
                            est["correo"],
                            f"Pago recibido {resumen.get('N√∫mero Venta')}",
                            json.dumps(resumen, indent=2)
                        )
                        enviar_correo_con_adjunto(
                            EMAIL_JEFE,
                            f"Comprobante {resumen.get('N√∫mero Venta')}",
                            json.dumps(resumen, indent=2),
                            temp_path
                        )
                        os.remove(temp_path)
                        reset_estado(cid)
                        return JSONResponse({
                            "type": "text",
                            "text": "‚úÖ Comprobante verificado. Tu pedido est√° en proceso. üöö"
                        })
                    else:
                        os.remove(temp_path)
                        return JSONResponse({
                            "type": "text",
                            "text": "‚ö†Ô∏è No pude verificar el comprobante. Aseg√∫rate que diga 'Pago exitoso'."
                        })

                except Exception as e:
                    logging.error(f"‚ùå Error al procesar comprobante: {e}")
                    return JSONResponse({
                        "type": "text",
                        "text": "‚ùå No pude procesar el comprobante. Intenta con otra imagen."
                    })

            # üîç CLIP (identificaci√≥n de modelo)
            else:
                try:
                    logging.info("[CLIP] üöÄ Iniciando identificaci√≥n de modelo")

                    embeddings_raw = cargar_embeddings_desde_cache()
                    embeddings: dict[str, list[list[float]]] = {}
                    for modelo, vecs in embeddings_raw.items():
                        if isinstance(vecs, list):
                            if len(vecs) == 512 and all(isinstance(x, (int, float)) for x in vecs):
                                embeddings[modelo] = [vecs]
                            else:
                                limpios = [v for v in vecs if isinstance(v, list) and len(v) == 512]
                                if limpios:
                                    embeddings[modelo] = limpios

                    os.makedirs("temp", exist_ok=True)
                    path_img = f"temp/{cid}_img.jpg"
                    with open(path_img, "wb") as f:
                        f.write(img_bytes)

                    emb_u = generar_embedding_imagen(img)
                    emb_u = torch.tensor(emb_u, dtype=torch.float32)
                    emb_u = torch.nn.functional.normalize(emb_u, dim=-1)
                    if emb_u.shape[0] != 512:
                        raise ValueError(f"Embedding cliente tama√±o {emb_u.shape} ‚â† 512")

                    mejor_sim, mejor_modelo = 0.0, None
                    for modelo, lista in embeddings.items():
                        for i, emb_ref in enumerate(lista):
                            try:
                                arr_ref = torch.tensor(emb_ref, dtype=torch.float32)
                                arr_ref = torch.nn.functional.normalize(arr_ref, dim=-1)
                                sim = torch.dot(emb_u, arr_ref).item()
                                if sim > mejor_sim:
                                    mejor_sim, mejor_modelo = sim, modelo
                            except Exception as e:
                                logging.warning(f"[CLIP] Error en {modelo}[{i}]: {e}")

                    logging.info(f"[CLIP] Mejor modelo: {mejor_modelo} ‚Äî Similitud: {mejor_sim:.4f}")

                    if mejor_modelo and mejor_sim >= 0.85:
                        p = mejor_modelo.split("_")
                        estado_usuario.setdefault(cid, reset_estado(cid))
                        estado_usuario[cid].update(
                            fase="imagen_detectada",
                            marca=p[0],
                            modelo=p[1] if len(p) > 1 else "Des.",
                            color="_".join(p[2:]) if len(p) > 2 else "Des."
                        )

                        modelo = estado_usuario[cid]["modelo"]
                        color = estado_usuario[cid]["color"]
                        marca = estado_usuario[cid]["marca"]
                        precio = next(
                            (i["precio"] for i in inv if
                             normalize(i["modelo"]) == normalize(modelo) and
                             normalize(i["color"]) == normalize(color) and
                             normalize(i["marca"]) == normalize(marca)),
                            None
                        )
                        precio_str = f"{int(precio):,} COP" if precio else "No disponible"

                        return JSONResponse({
                            "type": "text",
                            "text": (
                                f"üü¢ ¬°Qu√© buena elecci√≥n! Los *{modelo}* de color *{color}* est√°n brutales üòé.\n"
                                f"üí≤ Su precio es: *{precio_str}* y hoy tienes *5‚ÄØ% de descuento* si pagas ahora.\n\n"
                                "¬øSeguimos con la compra?"
                            ),
                            "parse_mode": "Markdown"
                        })
                    else:
                        reset_estado(cid)
                        return JSONResponse({
                            "type": "text",
                            "text": (
                                "‚ùå No logr√© identificar bien el modelo de la imagen.\n"
                                "¬øPodr√≠as enviarme otra foto un poco m√°s clara?"
                            )
                        })

                except Exception:
                    logging.exception("[CLIP] Error en identificaci√≥n:")
                    return JSONResponse({
                        "type": "text",
                        "text": "‚ö†Ô∏è Ocurri√≥ un error analizando la imagen."
                    })

        # üí¨ TEXTO
        elif mtype == "chat":
                fase_actual = estado_usuario.get(cid, {}).get("fase", "")
                logging.info(f"üí¨ Texto recibido en fase: {fase_actual or 'NO DEFINIDA'}")
                reply = await procesar_wa(cid, body)

                # A) Dict directo v√°lido
                if isinstance(reply, dict) and reply.get("type") in ("video", "audio", "image", "photo", "multi", "text"):
                        return JSONResponse(reply)

                # B) Lista ‚Üí convertir a multi
                if isinstance(reply, list):
                        return JSONResponse({"type": "multi", "messages": reply})

                # C) Texto plano (evita text anidado)
                if isinstance(reply, str):
                        return JSONResponse({"type": "text", "text": reply})

                # D) Seguridad: si vino algo raro
                return JSONResponse({"type": "text", "text": "‚ö†Ô∏è Error inesperado. Intenta de nuevo."})



        # üéôÔ∏è AUDIO
        elif mtype in ("audio", "ptt") or mimetype.startswith("audio"):
            try:
                logging.info("üéôÔ∏è Audio recibido. Iniciando procesamiento...")
                if not body:
                    return JSONResponse({"type": "text", "text": "‚ùå No recib√≠ un audio v√°lido."})

                b64_str = body.split(",", 1)[1] if "," in body else body
                audio_bytes = base64.b64decode(b64_str + "===")

                os.makedirs("temp_audio", exist_ok=True)
                audio_path = f"temp_audio/{cid}_voice.ogg"
                with open(audio_path, "wb") as f:
                    f.write(audio_bytes)

                texto_transcrito = await transcribe_audio(audio_path)
                if texto_transcrito:
                    reply = await procesar_wa(cid, texto_transcrito)
                    return JSONResponse(reply)
                else:
                    return JSONResponse({"type": "text", "text": "‚ö†Ô∏è No pude entender bien el audio. ¬øPodr√≠as repetirlo?"})

            except Exception:
                logging.exception("‚ùå Error durante el procesamiento del audio")
                return JSONResponse({
                    "type": "text",
                    "text": "‚ùå Ocurri√≥ un error al procesar tu audio. Intenta de nuevo."
                })

        # ü§∑ TIPO NO MANEJADO
        else:
            logging.warning(f"ü§∑‚Äç‚ôÇÔ∏è Tipo de mensaje no manejado: {mtype}")
            return JSONResponse({"type": "text", "text": f"‚ö†Ô∏è Tipo no manejado: {mtype}"})

    except Exception:
        logging.exception("üî• Error general en venom_webhook")
        return JSONResponse(
            {"type": "text", "text": "‚ö†Ô∏è Error interno procesando el mensaje."},
            status_code=200
        )

# -------------------------------------------------------------------------
# 5. Arranque del servidor
# -------------------------------------------------------------------------
if __name__ == "__main__":
    descargar_videos_drive()          # ‚¨áÔ∏è Descarga los videos (si no existen)
    descargar_imagenes_catalogo()     # ‚¨áÔ∏è Descarga 1 imagen por modelo del cat√°logo
    descargar_stickers_drive()
    descargar_video_confianza()
 
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("lector:api", host="0.0.0.0", port=port)


