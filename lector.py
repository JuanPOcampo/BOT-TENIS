# ‚Äî‚Äî‚Äî Librer√≠as est√°ndar de Python ‚Äî‚Äî‚Äî
import os
import io
import base64
import logging
import json
import re
import requests
import random
import string
import datetime
import unicodedata
import difflib
import asyncio
from types import SimpleNamespace
from collections import defaultdict

# ‚Äî‚Äî‚Äî Librer√≠as externas ‚Äî‚Äî‚Äî
from dotenv import load_dotenv
from PIL import Image
import imagehash
from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
import nest_asyncio
import openai

# Google Cloud
from google.cloud import vision
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

# Telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto,
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# Inicializa dotenv
load_dotenv()

# FastAPI instance
api = FastAPI()


creds_info = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = service_account.Credentials.from_service_account_info(
    creds_info,
    scopes=["https://www.googleapis.com/auth/drive.readonly"],
)
drive_service = build("drive", "v3", credentials=creds)
# Cliente OCR de Google Cloud Vision
vision_client = vision.ImageAnnotatorClient(credentials=creds)

DRIVE_FOLDER_ID = os.environ["DRIVE_FOLDER_ID"]
def precargar_imagenes_drive(service, root_id):
    """
    Recorre recursivamente la carpeta ra√≠z de Drive (root_id),
    descarga cada imagen, calcula su hash perceptual
    y devuelve un dict {hash: (marca, modelo, color)}.
    """
    imagenes = []



    def _walk(current_id, ruta):
        query = f"'{current_id}' in parents and trashed=false"
        page_token = None
        while True:
            resp = service.files().list(
                q=query,
                fields="nextPageToken, files(id,name,mimeType)",
                pageToken=page_token
            ).execute()

            for f in resp.get("files", []):
                if f["mimeType"] == "application/vnd.google-apps.folder":
                    _walk(f["id"], ruta + [f["name"]])
                elif f["mimeType"].startswith("image/"):
                    imagenes.append((f["id"], ruta, f["name"]))
            page_token = resp.get("nextPageToken")
            if page_token is None:
                break

    _walk(root_id, [])  # inicia el recorrido

    cache = {}
    for file_id, ruta, filename in imagenes:
        try:
            url = f"https://drive.google.com/uc?export=download&id={file_id}"
            res = requests.get(url)
            res.raise_for_status()
            img = Image.open(io.BytesIO(res.content))
            h = str(imagehash.phash(img))
            marca, modelo, color = (ruta + ["", "", ""])[:3]
            cache[h] = (marca, modelo, color)
        except Exception as e:
            print(f"‚ö†Ô∏è  No se pudo procesar {filename}: {e}")

    print(f"‚úÖ Hashes precargados: {len(cache)} im√°genes")
    return cache


PHASH_THRESHOLD = 20
AHASH_THRESHOLD = 18

def precargar_hashes_from_drive(folder_id: str) -> dict[str, list[tuple[imagehash.ImageHash, imagehash.ImageHash]]]:
    """
    Descarga todas las im√°genes de la carpeta de Drive, extrae SKU=modelo_color,
    calcula phash/ahash y agrupa por SKU.
    """
    model_hashes: dict[str, list[tuple[imagehash.ImageHash, imagehash.ImageHash]]] = {}
    page_token = None

    while True:
        resp = drive_service.files().list(
            q=f"'{folder_id}' in parents and mimeType contains 'image/'",
            spaces="drive",
            fields="nextPageToken, files(id, name)",
            pageToken=page_token
        ).execute()

        for f in resp.get("files", []):
            fid, name = f["id"], f["name"]
            base = os.path.splitext(name)[0]
            parts = base.split('_')
            sku = parts[0]
            if len(parts) > 1:
                sku += "_" + parts[1]
            if len(parts) > 2:
                sku += "_" + parts[2]

            request = drive_service.files().get_media(fileId=fid)
            fh = io.BytesIO()
            downloader = MediaIoBaseDownload(fh, request)
            done = False
            while not done:
                _, done = downloader.next_chunk()
            fh.seek(0)

            try:
                img = Image.open(fh)
                ph = imagehash.phash(img)
                ah = imagehash.average_hash(img)
                model_hashes.setdefault(sku, []).append((ph, ah))
            except Exception as e:
                logging.error(f"No pude procesar {name}: {e}")

        page_token = resp.get("nextPageToken")
        if not page_token:
            break

    logging.info(f"‚ñ∂ Precargados hashes para {len(model_hashes)} SKUs")
    return model_hashes

MODEL_HASHES = precargar_imagenes_drive(drive_service, DRIVE_FOLDER_ID)

for h, ref in MODEL_HASHES.items():
    print(f"HASH precargado: {h} ‚Üí {ref}")

def identify_model_from_stream(path: str) -> str | None:
    """
    Abre la imagen subida, calcula su hash y busca directamente
    en MODEL_HASHES cu√°l es el modelo (marca_modelo_color).
    """
    try:
        img_up = Image.open(path)
    except Exception as e:
        logging.error(f"No pude leer la imagen subida: {e}")
        return None

    # ‚îÄ‚îÄ‚îÄ Aqu√≠ calculas y buscas el hash ‚îÄ‚îÄ‚îÄ
    img_hash = str(imagehash.phash(img_up))
    modelo = next(
        (m for m, hashes in MODEL_HASHES.items() if img_hash in hashes),
        None
    )
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    return modelo

# ‚Äî‚Äî‚Äî VARIABLES DE ENTORNO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
OPENAI_API_KEY        = os.environ["OPENAI_API_KEY"]
NOMBRE_NEGOCIO        = os.environ.get("NOMBRE_NEGOCIO", "X100üî•üëü")
URL_SHEETS_INVENTARIO = os.environ["URL_SHEETS_INVENTARIO"]
URL_SHEETS_PEDIDOS    = os.environ["URL_SHEETS_PEDIDOS"]
EMAIL_DEVOLUCIONES    = os.environ["EMAIL_DEVOLUCIONES"]
EMAIL_JEFE            = os.environ["EMAIL_JEFE"]
SMTP_SERVER           = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT             = int(os.environ.get("SMTP_PORT", 587))
EMAIL_REMITENTE       = os.environ.get("EMAIL_REMITENTE")
EMAIL_PASSWORD        = os.environ.get("EMAIL_PASSWORD")

WELCOME_TEXT = (
    f"¬°Bienvenido a {NOMBRE_NEGOCIO}!\n\n"
    "Si tienes una foto puedes enviarla\n"
    "Si tienes numero de referencia enviamelo\n"
    "Puedes enviarme la foto del pedido\n"
    "Te gustaria ver unos videos de nuestras referenciasüëü?\n"
    "Cu√©ntame sin ning√∫n problema üòÄ"
)
CLIP_INSTRUCTIONS = (
    "Para enviarme una imagen, pulsa el √≠cono de clip (üìé), "
    "selecciona ‚ÄúGaler√≠a‚Äù o ‚ÄúArchivo‚Äù y elige la foto."
)
CATALOG_LINK    = "https://wa.me/c/573007607245üîù"
CATALOG_MESSAGE = f"Aqu√≠ tienes el cat√°logo: {CATALOG_LINK}"

def enviar_correo(dest, subj, body):
    logging.info(f"[EMAIL STUB] To: {dest}\nSubject: {subj}\n{body}")

def enviar_correo_con_adjunto(dest, subj, body, adj):
    logging.info(f"[EMAIL STUB] To: {dest}\nSubject: {subj}\n{body}\n[Adj: {adj}]")

def extraer_texto_comprobante(path_local: str) -> str:
    """
    Usa Google Cloud Vision OCR para extraer texto de una imagen local.
    """
    try:
        logging.info(f"[OCR] Procesando imagen: {path_local}")

        # 1. Cargar credenciales
        credentials = service_account.Credentials.from_service_account_info(
            json.loads(os.environ["GOOGLE_CREDS_JSON"])
        )
        client = vision.ImageAnnotatorClient(credentials=credentials)

        # 2. Leer imagen
        with io.open(path_local, "rb") as image_file:
            content = image_file.read()

        if not content:
            logging.warning("[OCR] Imagen est√° vac√≠a o no se pudo leer.")
            return ""

        image = vision.Image(content=content)

        # 3. Ejecutar OCR
        response = client.text_detection(image=image)

        # 4. Capturar errores de API
        if response.error.message:
            logging.error(f"[OCR ERROR] Google Vision respondi√≥ con error: {response.error.message}")
            return ""

        texts = response.text_annotations

        if texts:
            texto_detectado = texts[0].description
            logging.info("[OCR RESULTADO] Texto completo detectado:")
            for i, linea in enumerate(texto_detectado.splitlines()):
                logging.info(f"[OCR LINEA {i}] ‚Üí {repr(linea)}")
            return texto_detectado
        else:
            logging.warning("[OCR] No se detect√≥ texto en la imagen.")
            return ""

    except Exception as e:
        logging.exception(f"‚ùå Error extrayendo texto del comprobante: {e}")
        return ""

def es_comprobante_valido(texto: str) -> bool:
    # üîç Mostrar texto crudo completo
    logging.info("[OCR DEBUG] Texto detectado en comprobante:\n" + texto)

    # üîç Mostrar l√≠nea por l√≠nea con representaci√≥n exacta
    for i, linea in enumerate(texto.splitlines()):
        logging.info(f"[OCR LINEA {i}] ‚Üí {repr(linea)}")

    # üîÑ Normalizar texto (quitar tildes, pasar a min√∫sculas, quitar signos)
    texto_normalizado = unicodedata.normalize("NFKD", texto).encode("ascii", "ignore").decode("utf-8")
    texto_normalizado = texto_normalizado.lower()
    texto_normalizado = re.sub(r"[^\w\s]", "", texto_normalizado)

    logging.info("[OCR DEBUG] Texto normalizado:\n" + texto_normalizado)

    # üîë Frases clave v√°lidas
    claves = [
        "pago exitoso",
        "transferencia exitosa",
        "comprobante",
        "recibo",
        "pago aprobado",
        "transferencia realizada"
    ]

    for clave in claves:
        if clave in texto_normalizado:
            logging.info(f"[OCR DEBUG] Coincidencia encontrada: '{clave}'")
            return True

    logging.warning("[OCR DEBUG] No se encontr√≥ ninguna clave v√°lida en el texto extra√≠do.")
    return False
# ‚Äî‚Äî‚Äî UTILIDADES DE INVENTARIO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
estado_usuario: dict[int, dict] = {}
inventario_cache = None

def menciona_imagen(texto: str) -> bool:
    texto = normalize(texto)
    claves = [
        "foto", "imagen", "pantallazo", "screenshot", "captura",
        "tengo una foto", "te paso la imagen", "imagen del modelo",
        "screen", "de instagram", "vi en insta", "historia de insta",
        "la tengo guardada", "foto del tenis", "foto del zapato"
    ]
    return any(palabra in texto for palabra in claves)

def normalize(text) -> str:
    s = "" if text is None else str(text)
    t = unicodedata.normalize('NFKD', s.strip().lower())
    return "".join(ch for ch in t if not unicodedata.combining(ch))

CONVERSION_TALLAS = {
    "usa": {
        "6": "38", "6.5": "38.5", "7": "39", "7.5": "39.5",
        "8": "40", "8.5": "40.5", "9": "41", "9.5": "41.5",
        "10": "42", "10.5": "43", "11": "44", "11.5": "44.5",
        "12": "45", "12.5": "45.5", "13": "46"
    },
    "euro": {
        "38": "38", "38.5": "38.5", "39": "39", "39.5": "39.5",
        "40": "40", "40.5": "40.5", "41": "41", "41.5": "41.5",
        "42": "42", "43": "43", "44": "44", "44.5": "44.5",
        "45": "45", "45.5": "45.5", "46": "46"
    },
    "colombia": {
        "38": "38", "38.5": "38.5", "39": "39", "39.5": "39.5",
        "40": "40", "40.5": "40.5", "41": "41", "41.5": "41.5",
        "42": "42", "43": "43", "44": "44", "44.5": "44.5",
        "45": "45", "45.5": "45.5", "46": "46"
    }
}
def detectar_talla(texto_usuario: str, tallas_disponibles: list[str]) -> str | None:
    texto = normalize(texto_usuario)

    # Reemplazos comunes para tallas con medio punto
    reemplazos = {
        "seis y medio": "6.5", "7 y medio": "7.5", "ocho y medio": "8.5", "nueve y medio": "9.5",
        "diez y medio": "10.5", "once y medio": "11.5", "doce y medio": "12.5",

        "6 y 1/2": "6.5", "7 y 1/2": "7.5", "8 y 1/2": "8.5", "9 y 1/2": "9.5",
        "10 y 1/2": "10.5", "11 y 1/2": "11.5", "12 y 1/2": "12.5",

        "seis punto cinco": "6.5", "siete punto cinco": "7.5", "ocho punto cinco": "8.5",
        "nueve punto cinco": "9.5", "diez punto cinco": "10.5", "once punto cinco": "11.5", "doce punto cinco": "12.5",

        "6.5": "6.5", "7.5": "7.5", "8.5": "8.5", "9.5": "9.5", "10.5": "10.5",
        "11.5": "11.5", "12.5": "12.5", "13": "13"
    }

    for k, v in reemplazos.items():
        if k in texto:
            texto = texto.replace(k, v)

    # Sistema
    if "usa" in texto:
        sistema = "usa"
    elif "euro" in texto or "europea" in texto:
        sistema = "euro"
    elif "colomb" in texto:
        sistema = "colombia"
    else:
        sistema = None

    # Extrae n√∫meros incluyendo decimales (6.5, 10.5, etc)
    numeros = re.findall(r"\d+(?:\.\d+)?", texto)

    if not numeros:
        return None

    for num in numeros:
        if sistema:
            talla_estandar = CONVERSION_TALLAS.get(sistema, {}).get(num)
            if talla_estandar and talla_estandar in tallas_disponibles:
                return talla_estandar
        else:
            if num in tallas_disponibles:
                return num

    return None

def reset_estado(cid: int):
    estado_usuario[cid] = {
        "fase": "inicio",
        "marca": None, "modelo": None, "color": None, "talla": None,
        "nombre": None, "correo": None, "telefono": None,
        "ciudad": None, "provincia": None, "direccion": None,
        "referencia": None, "resumen": None, "sale_id": None
    }

def menu_botones(opts: list[str]):
    return ReplyKeyboardMarkup([[KeyboardButton(o)] for o in opts], resize_keyboard=True)

def obtener_inventario() -> list[dict]:
    global inventario_cache
    if inventario_cache is None:
        try:
            inventario_cache = requests.get(URL_SHEETS_INVENTARIO).json()
        except:
            inventario_cache = []
    return inventario_cache

def disponible(item: dict) -> bool:
    return normalize(item.get("stock","")) == "si"

def obtener_marcas_unicas(inv: list[dict]) -> list[str]:
    return sorted({i.get("marca","").strip() for i in inv if disponible(i)})

def obtener_modelos_por_marca(inv: list[dict], marca: str) -> list[str]:
    return sorted({i.get("modelo","").strip()
                   for i in inv
                   if normalize(i.get("marca","")) == normalize(marca) and disponible(i)})

def obtener_colores_por_modelo(inv: list[dict], modelo: str) -> list[str]:
    return sorted({i.get("color", "").strip()
                   for i in inv
                   if normalize(i.get("modelo", "")) == normalize(modelo)
                   and disponible(i)})

def obtener_tallas_por_color(inv: list[dict], modelo: str, color: str) -> list[str]:
    return sorted({
        str(i.get("talla", "")).strip()
        for i in inv
        if normalize(i.get("modelo", "")) == normalize(modelo)
        and normalize(i.get("color", "")) == normalize(color)
        and disponible(i)
    })

#  TRANSCRIPCI√ìN DE AUDIO (WHISPER)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TEMP_AUDIO_DIR = "temp_audio"
os.makedirs(TEMP_AUDIO_DIR, exist_ok=True)

async def transcribe_audio(file_path: str) -> str | None:
    """
    Env√≠a el .ogg a Whisper-1 (idioma ES) y devuelve la transcripci√≥n.
    Si falla, devuelve None.
    """
    try:
        with open(file_path, "rb") as f:
            rsp = await client.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                language="es",               # fuerza espa√±ol
                response_format="text",      # devuelve texto plano
                prompt="Espa√±ol Colombia, jerga: parce, mano, √±ero, buenos d√≠as, buenas, hola"
            )
        if isinstance(rsp, str) and rsp.strip():
            return rsp.strip()
    except Exception as e:
        logging.error(f"‚ùå Whisper error: {e}")
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Enviar video de referencia
async def enviar_video_referencia(cid, ctx, referencia):
    try:
        videos = {
            "ds 277": "ID_VIDEO_DS277",
            "277": "ID_VIDEO_DS277",
            "ds 288": "ID_VIDEO_DS288",
            "288": "ID_VIDEO_DS288",
            "ds 299": "ID_VIDEO_DS299",
            "299": "ID_VIDEO_DS299",
        }

        video_id = videos.get(referencia.lower())

        if video_id:
            video_url = f"https://drive.google.com/uc?id={video_id}"
            await ctx.bot.send_chat_action(chat_id=cid, action=ChatAction.UPLOAD_VIDEO)
            await ctx.bot.send_video(
                chat_id=cid,
                video=video_url,
                caption=f"üé¨ Video de referencia {referencia.upper()}.\n¬øDeseas continuar tu compra? (SI/NO)"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="üòï No tengo un video espec√≠fico para esa referencia."
            )
    except Exception as e:
        logging.error(f"Error enviando video: {e}")
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚ö†Ô∏è Ocurri√≥ un error al intentar enviar el video. Intenta de nuevo."
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Manejar preguntas frecuentes (FAQ)
async def manejar_pqrs(update, ctx) -> bool:
    txt = normalize(update.message.text or "")

    faq_respuestas = {
        "garantia": "üõ°Ô∏è Todos nuestros productos tienen *60 d√≠as de garant√≠a* por defectos de f√°brica.",
        "garant√≠a": "üõ°Ô∏è Todos nuestros productos tienen *60 d√≠as de garant√≠a* por defectos de f√°brica.",
        "envio": "üöö Hacemos env√≠os a toda Colombia en m√°ximo *2 d√≠as h√°biles*.",
        "env√≠o": "üöö Hacemos env√≠os a toda Colombia en m√°ximo *2 d√≠as h√°biles*.",
        "demora": "‚è≥ El env√≠o normalmente tarda *2 d√≠as h√°biles*. ¬°Te llega r√°pido!",
        "contraentrega": "üíµ Tenemos *pago contra entrega* con anticipo de $35.000.",
        "pago": "üí≥ Puedes pagar por transferencia bancaria, QR o contra entrega.",
        "original": "‚úÖ S√≠, son *originales colombianos* de alta calidad.",
        "ubicacion": "üìç Estamos en *Bucaramanga, Santander* y enviamos a todo el pa√≠s.",
        "ubicaci√≥n": "üìç Estamos en *Bucaramanga, Santander* y enviamos a todo el pa√≠s.",
        "talla": "üìè Nuestra horma es *normal*. La talla que usas normalmente te quedar√° perfecta.",
        "descuento": "üéâ Si compras 2 pares te damos *10% de descuento* adicional."
    }

    for palabra, respuesta in faq_respuestas.items():
        if palabra in txt:
            await ctx.bot.send_message(
                chat_id=update.effective_chat.id,
                text=respuesta,
                parse_mode="Markdown"
            )
            return True

    return False

# üî• Manejar imagen enviada por el usuario
async def manejar_imagen(update, ctx):
    cid = update.effective_chat.id
    est = estado_usuario.setdefault(cid, reset_estado(cid))

    # Descargar la imagen temporalmente
    f = await update.message.photo[-1].get_file()
    tmp_path = os.path.join("temp", f"{cid}.jpg")
    os.makedirs("temp", exist_ok=True)
    await f.download_to_drive(tmp_path)

    # Buscar el modelo usando hashing
    ref = identify_model_from_stream(tmp_path)
    os.remove(tmp_path)

    if ref:
        try:
            marca, modelo, color = ref.split('_')
        except Exception as e:
            logging.error(f"Error al desempaquetar referencia: {e}")
            marca, modelo, color = "Desconocido", ref, ""

        est.update({
            "marca": marca,
            "modelo": modelo,
            "color": color,
            "fase": "imagen_detectada"
        })

        await ctx.bot.send_message(
            chat_id=cid,
            text=f"üì∏ La imagen coincide con:\n"
                 f"*Marca:* {marca}\n"
                 f"*Modelo:* {modelo}\n"
                 f"*Color:* {color}\n\n"
                 "¬øDeseas continuar tu compra con este modelo? (SI/NO)",
            parse_mode="Markdown",
            reply_markup=menu_botones(["SI", "NO"])
        )
    else:
        reset_estado(cid)
        await ctx.bot.send_message(
            chat_id=cid,
            text="üòî No pude reconocer el modelo de la imagen. ¬øQuieres intentar otra vez?",
            parse_mode="Markdown",
            reply_markup=menu_botones(["Enviar otra imagen", "Ver cat√°logo"])
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Mostrar im√°genes del modelo detectado
async def mostrar_imagenes_modelo(cid, ctx, marca, tipo_modelo):
    sku = f"{marca.replace(' ', '_')}_{tipo_modelo}"
    resp = drive_service.files().list(
        q=(
            f"'{DRIVE_FOLDER_ID}' in parents "
            f"and name contains '{sku}' "
            "and mimeType contains 'image/'"
        ),
        spaces="drive",
        fields="files(id, name)"
    ).execute()

    files = resp.get("files", [])
    if not files:
        await ctx.bot.send_message(cid, "Lo siento, no encontr√© im√°genes de ese modelo.")
        return

    media = []
    for f in files[:5]:
        url = f"https://drive.google.com/uc?id={f['id']}"
        caption = f["name"].split("_", 2)[-1]
        media.append(InputMediaPhoto(media=url, caption=caption))

    await ctx.bot.send_chat_action(cid, action=ChatAction.UPLOAD_PHOTO)
    await ctx.bot.send_media_group(chat_id=cid, media=media)

    est = estado_usuario[cid]
    est["fase"] = "esperando_color"
    est["modelo"] = tipo_modelo

    await ctx.bot.send_message(
        chat_id=cid,
        text="¬øQu√© color te gustar√≠a?",
        reply_markup=menu_botones(
            obtener_colores_por_modelo(obtener_inventario(), est["marca"], tipo_modelo)
        )
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Registrar la orden en Google Sheets
def registrar_orden(data: dict):
    payload = {
        "numero_venta": data.get("N√∫mero Venta", ""),
        "fecha_venta":  data.get("Fecha Venta", ""),
        "cliente":      data.get("Cliente", ""),
        "telefono":     data.get("Tel√©fono", ""),
        "producto":     data.get("Producto", ""),
        "color":        data.get("Color", ""),
        "talla":        data.get("Talla", ""),
        "correo":       data.get("Correo", ""),
        "pago":         data.get("Pago", ""),
        "estado":       data.get("Estado", "")
    }
    logging.info(f"[SHEETS] Payload JSON que env√≠o:\n{payload}")
    try:
        resp = requests.post(URL_SHEETS_PEDIDOS, json=payload)
        logging.info(f"[SHEETS] HTTP {resp.status_code} ‚Äî Body: {resp.text}")
    except Exception as e:
        logging.error(f"[SHEETS] Error al hacer POST: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üî• Generar ID √∫nico para una venta
def generate_sale_id() -> str:
    ts = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    rnd = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"VEN-{ts}-{rnd}"


#  HOJA DE PEDIDOS
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def registrar_orden(data: dict):
    payload = {
        "numero_venta": data.get("N√∫mero Venta", ""),
        "fecha_venta":  data.get("Fecha Venta", ""),
        "cliente":      data.get("Cliente", ""),
        "telefono":     data.get("Tel√©fono", ""),
        "producto":     data.get("Producto", ""),
        "color":        data.get("Color", ""),
        "talla":        data.get("Talla", ""),
        "correo":       data.get("Correo", ""),
        "pago":         data.get("Pago", ""),
        "estado":       data.get("Estado", "")
    }
    logging.info(f"[SHEETS] Payload JSON que env√≠o:\n{payload}")
    try:
        resp = requests.post(URL_SHEETS_PEDIDOS, json=payload)
        logging.info(f"[SHEETS] HTTP {resp.status_code} ‚Äî Body: {resp.text}")
    except Exception as e:
        logging.error(f"[SHEETS] Error al hacer POST: {e}")

def generate_sale_id() -> str:
    ts = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    rnd = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"VEN-{ts}-{rnd}"


# --------------------------------------------------------------------------------------------------

async def responder(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id

    # 1) Primer contacto: saludo
    if cid not in estado_usuario:
        reset_estado(cid)
        await update.message.reply_text(
            WELCOME_TEXT,
            reply_markup=menu_botones([
                "Hacer pedido", "Enviar imagen", "Ver cat√°logo",
                "Rastrear pedido", "Realizar cambio"
            ])
        )
        return

    # 2) Estado actual e inventario
    est = estado_usuario[cid]
    inv = obtener_inventario()

    # 3) Captura y normaliza texto
    txt_raw = update.message.text or ""
    txt = normalize(txt_raw)

    # ‚úÖ DEBUG real
    print("üß† FASE:", est.get("fase"))
    print("üß† TEXTO:", txt_raw, "|", repr(txt_raw))
    print("üß† ESTADO:", est)

    # 4) Reinicio expl√≠cito si escribe /start o similares
    if txt in ("reset", "reiniciar", "empezar", "volver", "/start", "menu", "inicio"):
        reset_estado(cid)
        await update.message.reply_text(
            WELCOME_TEXT,
            reply_markup=menu_botones([
                "Hacer pedido", "Enviar imagen", "Ver cat√°logo",
                "Rastrear pedido", "Realizar cambio"
            ])
        )
        return

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Preguntas frecuentes (FAQ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if est.get("fase") not in ("esperando_pago", "esperando_comprobante"):

        # FAQ 1: ¬øCu√°nto demora el env√≠o?
        if any(frase in txt for frase in (
            "cuanto demora", "cu√°nto demora", "cuanto tarda", "cu√°nto tarda",
            "cuanto se demora", "cu√°nto se demora", "en cuanto llega", "en cu√°nto llega",
            "me llega rapido", "llegan rapido"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üöö El tiempo de entrega depende de la ciudad de destino, "
                    "pero generalmente tarda *2 d√≠as h√°biles* en llegar.\n\n"
                    "Si lo necesitas para *ma√±ana mismo*, podemos enviarlo al terminal de transporte. "
                    "En ese caso aplica *pago anticipado* (no contra entrega)."
                ),
                parse_mode="Markdown"
            )
            return

        # FAQ 2: ¬øTienen pago contra entrega?
        if any(frase in txt for frase in (
            "pago contra entrega", "pago contraentrega", "contraentrega", "contra entrega",
            "pagan al recibir", "puedo pagar al recibir", "tienen contra entrega"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üì¶ ¬°Claro que s√≠! Tenemos *pago contra entrega*.\n\n"
                    "Pedimos un *anticipo de $35 000* que cubre el env√≠o. "
                    "Ese valor se descuenta del precio total cuando recibes el pedido."
                ),
                parse_mode="Markdown"
            )
            return

        # FAQ 3: ¬øTienen garant√≠a?
        if any(frase in txt for frase in (
            "tienen garantia", "tienen garant√≠a", "hay garant√≠a", "hay garantia",
            "garant√≠a", "garantia", "tienen garantia de fabrica"
        )):
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    "üõ°Ô∏è Todos nuestros productos tienen *garant√≠a de 60 d√≠as* "
                    "por defectos de f√°brica o problemas de pegado.\n\n"
                    "Cualquier inconveniente, estamos para ayudarte."
                ),
                parse_mode="Markdown"
            )
            return


    # ... puedes dejar tus dem√°s FAQs igual que est√°n ...

    # FAQ 4: ¬øC√≥mo s√© que no me van a robar?
    if any(frase in txt for frase in (
        "no me van a robar", "me van a robar", "es seguro",
        "como se que es seguro", "no es estafa", "es confiable",
        "me estafan", "roban por internet", "es real", "desconf√≠o",
        "no me da confianza", "no conf√≠o", "dudas"
    )):
        video_url = "https://tudominio.com/videos/video_confianza.mp4"
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "ü§ù Entendemos tu preocupaci√≥n. "
                "Te compartimos este video para que veas que somos una tienda real y seria."
            ),
            parse_mode="Markdown"
        )
        await ctx.bot.send_chat_action(chat_id=cid, action=ChatAction.UPLOAD_VIDEO)
        await ctx.bot.send_video(
            chat_id=cid,
            video=video_url,
            caption="¬°Estamos aqu√≠ para ayudarte en lo que necesites! üëü‚ú®"
        )
        return

    # FAQ 5: ¬øD√≥nde est√°n ubicados?
    if any(frase in txt for frase in (
        "donde estan ubicados", "donde queda", "ubicacion", "ubicaci√≥n",
        "direccion", "direcci√≥n", "donde estan", "donde es la tienda",
        "estan ubicados", "ubicados en donde", "en que ciudad estan", "en que parte estan"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üìç Estamos en *Bucaramanga, Santander*.\n\n"
                "üè° *Barrio San Miguel, Calle 52 #16-74*\n\n"
                "üöö ¬°Enviamos a todo Colombia con Servientrega!\n\n"
                "Ubicaci√≥n Google Maps: https://maps.google.com/?q=7.109500,-73.121597"
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 6: ¬øSon nacionales o importados?
    if any(frase in txt for frase in (
        "son nacionales", "son importados", "es nacional o importado",
        "nacionales o importados", "hecho en colombia", "fabricados en colombia",
        "son de aqui", "es de colombia", "fabricacion colombiana"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üá®üá¥ Nuestra marca es *100 % colombiana* y las zapatillas "
                "se elaboran con orgullo en *Bucaramanga* por artesanos locales."
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 7: ¬øSon originales?
    if any(frase in txt for frase in (
        "son originales", "es original", "originales",
        "es copia", "son copia", "son replica", "r√©plica", "imitacion"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ ¬°Claro! Son *originales*. Somos *X100*, marca 100 % colombiana reconocida por su calidad y dise√±o.",
            parse_mode="Markdown"
        )
        return

    # FAQ 8: ¬øDe qu√© calidad son?
    if any(frase in txt for frase in (
        "que calidad son", "de que calidad son", "son buena calidad", "son de buena calidad",
        "son de mala calidad", "que calidad manejan", "que calidad tienen", "calidad de las zapatillas"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "‚ú® Nuestras zapatillas est√°n elaboradas con *materiales de alta calidad*.\n\n"
                "Cada par se fabrica cuidadosamente para asegurar *calidad AAA* üëüüîù, "
                "garantizando comodidad, durabilidad y excelente acabado."
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 9: ¬øHay descuento si compro 2 pares?
    if any(frase in txt for frase in (
        "si compro 2 pares", "dos pares descuento", "descuento por 2 pares",
        "descuento por dos pares", "me descuentan si compro dos", "descuento si compro dos",
        "hay descuento por dos", "promocion dos pares", "descuento en 2 pares"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üéâ ¬°S√≠! Si compras *2 pares* te damos un *10% de descuento adicional* sobre el total.\n\n"
                "¬°Aprovecha para estrenar m√°s y pagar menos! üî•üëüüëü"
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 10: ¬øManejan precios para mayoristas?
    if any(frase in txt for frase in (
        "precio mayorista", "precios para mayoristas", "mayorista", "quiero vender",
        "puedo venderlos", "descuento para revender", "revender", "comprar para vender",
        "manejan precios para mayoristas", "mayoreo", "venta al por mayor"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üõçÔ∏è ¬°Claro! Manejamos *precios para mayoristas* en pedidos de *6 pares en adelante*, "
                "sin importar tallas ni referencias.\n\n"
                "Condici√≥n: vender m√≠nimo al mismo precio que nosotros para cuidar el mercado."
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 11: ¬øLas tallas son normales o grandes?
    if any(frase in txt for frase in (
        "las tallas son normales", "horma normal", "talla normal",
        "horma grande", "horma peque√±a", "tallas grandes", "tallas peque√±as",
        "las tallas son grandes", "las tallas son peque√±as", "como son las tallas"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üëü Nuestra horma es *normal*. Si calzas talla *40* nacional, te queda bien la *40* de nosotros.\n\n"
                "Para mayor seguridad, puedes enviarnos una foto de la *etiqueta interna* de tus tenis actuales üìè‚ú®."
            ),
            parse_mode="Markdown"
        )
        return

    # FAQ 12: ¬øCu√°l es la talla m√°s grande que manejan?
    if any(frase in txt for frase in (
        "talla mas grande", "talla m√°s grande", "cual es la talla mas grande",
        "hasta que talla llegan", "mayor talla", "talla maxima", "talla m√°xima"
    )):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üìè La talla m√°s grande que manejamos es:\n\n"
                "‚Ä¢ *45 Nacional* üá®üá¥\n"
                "‚Ä¢ *47 Europeo* üá™üá∫\n\n"
                "¬°Tambi√©n tenemos opciones para pies grandes! üëü‚ú®"
            ),
            parse_mode="Markdown"
        )
        return

    # üì∑ Si el usuario env√≠a una foto (detectamos modelo autom√°ticamente)
    if update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        ref = identify_model_from_stream(tmp)
        os.remove(tmp)

        if ref:
            marca, modelo, color = ref.split('_')
            est.update({
                "marca": marca,
                "modelo": modelo,
                "color": color,
                "fase": "imagen_detectada"
            })
            await ctx.bot.send_message(
                chat_id=cid,
                text=f"La imagen coincide con {marca} {modelo} color {color}. ¬øContinuamos? (SI/NO)",
                reply_markup=menu_botones(["SI", "NO"]),
            )
        else:
            reset_estado(cid)
            await ctx.bot.send_message(
                chat_id=cid,
                text="üòï No reconoc√≠ el modelo. Escribe /start para reiniciar.",
                parse_mode="Markdown"
            )
        return

    # üì∑ Confirmaci√≥n si la imagen detectada fue correcta
    if est.get("fase") == "imagen_detectada":
        if any(frase in txt for frase in ("si", "s√≠", "s", "claro", "claro que s√≠", "quiero comprar", "continuar", "vamos")):
            est["fase"] = "esperando_talla"
            tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
            if isinstance(tallas, (int, float, str)):
                tallas = [str(tallas)]
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬°Perfecto! üéØ ¬øQu√© talla deseas?",
                reply_markup=menu_botones(tallas),
            )
            return
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="Cancelado. /start para reiniciar o cu√©ntame si quieres ver otra referencia. üìã",
                parse_mode="Markdown"
            )
            reset_estado(cid)
            return

    # üõí Flujo manual si est√° buscando modelo
    if est.get("fase") == "esperando_modelo":
        modelos = obtener_modelos_por_marca(inv, est["marca"])
        if txt in map(normalize, modelos):
            est["modelo"] = next(m for m in modelos if normalize(m) == txt)
            est["fase"] = "esperando_color"
            colores = obtener_colores_por_modelo(inv, est["modelo"])
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øQu√© color deseas?",
                reply_markup=menu_botones(colores),
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="Elige un modelo v√°lido.",
                reply_markup=menu_botones(modelos),
            )
        return

    # üé® Elegir color del modelo
    if est.get("fase") == "esperando_color":
        colores = obtener_colores_por_modelo(inv, est["modelo"])
        if isinstance(colores, (int, float, str)):
            colores = [str(colores)]

        # Normalizar entrada y colores
        colores_normalizados = {normalize(c): c for c in colores}
        entrada_normalizada = normalize(txt)

        # Buscar coincidencia cercana
        import difflib
        coincidencias = difflib.get_close_matches(entrada_normalizada, colores_normalizados.keys(), n=1, cutoff=0.6)

        if coincidencias:
            color_seleccionado = colores_normalizados[coincidencias[0]]
            est["color"] = color_seleccionado
            est["fase"] = "esperando_talla"

            tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
            if isinstance(tallas, (int, float, str)):
                tallas = [str(tallas)]

            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"Perfecto üéØ ¬øQu√© talla deseas para el modelo *{est['modelo']}* color *{est['color']}*?\n\n"
                    f"üëâ Tallas disponibles: {', '.join(tallas)}"
                ),
                parse_mode="Markdown"
            )
        else:
            colores_str = "\n".join(f"- {c}" for c in colores)
            await ctx.bot.send_message(
                chat_id=cid,
                text=(
                    f"‚ö†Ô∏è No entend√≠ ese color.\n\n"
                    f"üé® Los colores disponibles para *{est['modelo']}* son:\n\n"
                    f"{colores_str}\n\n"
                    "¬øCu√°l color te interesa?"
                ),
                parse_mode="Markdown"
            )
        return

    # üëü Elegir talla
    if est.get("fase") == "esperando_talla":
        tallas = obtener_tallas_por_color(inv, est["modelo"], est["color"])
        
        if isinstance(tallas, (int, float, str)):
            tallas = [str(tallas)]

        talla_detectada = detectar_talla(txt_raw, tallas)

        if talla_detectada:
            est["talla"] = talla_detectada
            est["fase"] = "esperando_nombre"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øTu nombre completo? üë§",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text=f"‚ö†Ô∏è Las tallas disponibles para {est['modelo']} color {est['color']} son:\n{', '.join(tallas)}",
                parse_mode="Markdown",
                reply_markup=menu_botones(tallas),
            )
        return

    # ‚úèÔ∏è Nombre del cliente
    if est.get("fase") == "esperando_nombre":
        est["nombre"] = txt_raw
        est["fase"] = "esperando_correo"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øCu√°l es tu correo electr√≥nico? üìß",
            parse_mode="Markdown"
        )
        return

    # üìß Correo del cliente
    if est.get("fase") == "esperando_correo":
        if re.match(r"[^@]+@[^@]+\.[^@]+", txt_raw):
            est["correo"] = txt_raw
            est["fase"] = "esperando_telefono"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øTu n√∫mero de tel√©fono? üì±",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è Correo inv√°lido. Intenta de nuevo.",
                parse_mode="Markdown"
            )
        return


    # üìû Tel√©fono del cliente
    if est.get("fase") == "esperando_telefono":
        if re.match(r"^\+?\d{7,15}$", txt_raw):
            est["telefono"] = txt_raw
            est["fase"] = "esperando_ciudad"
            await ctx.bot.send_message(
                chat_id=cid,
                text="¬øEn qu√© ciudad est√°s? üèôÔ∏è",
                parse_mode="Markdown"
            )
        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è Tel√©fono inv√°lido. Intenta de nuevo.",
                parse_mode="Markdown"
            )
        return

    # üåÜ Ciudad del cliente
    if est.get("fase") == "esperando_ciudad":
        est["ciudad"] = txt_raw
        est["fase"] = "esperando_provincia"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øEn qu√© departamento o provincia est√°s? üèûÔ∏è",
            parse_mode="Markdown"
        )
        return

    # üèûÔ∏è Provincia del cliente
    if est.get("fase") == "esperando_provincia":
        est["provincia"] = txt_raw
        est["fase"] = "esperando_direccion"
        await ctx.bot.send_message(
            chat_id=cid,
            text="¬øDirecci√≥n exacta de env√≠o? üè°",
            parse_mode="Markdown"
        )
        return

    # ------------------------------------------------------------------------
    # üè° Direcci√≥n de env√≠o
    if est.get("fase") == "esperando_direccion":
        est["direccion"] = txt_raw.strip()

        precio = next(
            (
                i["precio"] for i in inv
                if normalize(i["marca"]) == normalize(est["marca"])
                and normalize(i["modelo"]) == normalize(est["modelo"])
                and normalize(i["color"]) == normalize(est["color"])
            ),
            None
        )
        if precio is None:
            await ctx.bot.send_message(
                chat_id=cid,
                text="No pude obtener el precio, intenta de nuevo."
            )
            return

        est["precio_total"] = int(precio)
        sale_id = generate_sale_id()
        est["sale_id"] = sale_id
        est["resumen"] = {
            "N√∫mero Venta": sale_id,
            "Fecha Venta": datetime.datetime.now().isoformat(),
            "Cliente": est["nombre"],
            "Tel√©fono": est["telefono"],
            "Producto": est["modelo"],
            "Color": est["color"],
            "Talla": est["talla"],
            "Correo": est["correo"],
            "Pago": None,
            "Estado": "PENDIENTE"
        }

        msg = (
            f"‚úÖ Pedido: {sale_id}\n"
            f"Nombre: {est['nombre']}\n"
            f"Correo: {est['correo']}\n"
            f"Celular: {est['telefono']}\n"
            f"Direcci√≥n: {est['direccion']}, {est['ciudad']}, {est['provincia']}\n"
            f"Producto: {est['modelo']} color {est['color']} talla {est['talla']}\n"
            f"Valor a pagar: {precio:,} COP\n\n"
            "¬øC√≥mo deseas hacer el pago?\n"
            "‚Ä¢ Contraentrega: adelanta 35 000 COP para el env√≠o (se descuenta del total).\n"
            "‚Ä¢ Transferencia inmediata: paga completo hoy y obt√©n 5 % de descuento.\n\n"
            "Escribe tu m√©todo de pago: Transferencia o Contraentrega."
        )
        await ctx.bot.send_message(chat_id=cid, text=msg)
        est["fase"] = "esperando_pago"
        estado_usuario[cid] = est
        return

    # üí≥ M√©todo de pago
    if est.get("fase") == "esperando_pago":
        print("üß™ ENTR√ì AL BLOQUE DE PAGO ‚úÖ")

        opciones = {
            "transferencia": "transferencia",
            "transf": "transferencia",
            "trans": "transferencia",
            "pago inmediato": "transferencia",
            "qr": "transferencia",
            "contraentrega": "contraentrega",
            "contra entrega": "contraentrega",
            "contra": "contraentrega",
            "contrapago": "contraentrega"
        }

        txt_norm = normalize(txt_raw).lower().strip()
        op_detectada = next((v for k, v in opciones.items() if k in txt_norm), None)

        print("üß™ opci√≥n detectada:", op_detectada)

        if not op_detectada:
            print("‚ùå Opci√≥n inv√°lida detectada")
            await ctx.bot.send_message(chat_id=cid, text="‚ö†Ô∏è Opci√≥n no v√°lida. Escribe Transferencia o Contraentrega.")
            return

        resumen = est.get("resumen")
        precio_original = est.get("precio_total")

        if not resumen or not precio_original:
            print("‚ùå ERROR: resumen o precio_total vac√≠os")
            await ctx.bot.send_message(chat_id=cid, text="‚ùå Hubo un problema. Escribe *hola* para reiniciar.")
            reset_estado(cid)
            estado_usuario.pop(cid, None)
            return

        precio_original = int(precio_original)

        if op_detectada == "transferencia":
            est["fase"] = "esperando_comprobante"
            resumen["Pago"] = "Transferencia"
            descuento = round(precio_original * 0.05)
            valor_final = precio_original - descuento
            resumen["Descuento"] = f"-{descuento} COP"
            resumen["Valor Final"] = valor_final
            estado_usuario[cid] = est

            msg = (
                "üü¢ Elegiste TRANSFERENCIA.\n"
                f"üí∞ Valor original: {precio_original} COP\n"
                f"üéâ Descuento 5 %: -{descuento} COP\n"
                f"‚úÖ Total a pagar: {valor_final} COP\n\n"
                "üí≥ Cuentas disponibles:\n"
                "- Bancolombia 30300002233 (X100 SAS)\n"
                "- Nequi 3177171171\n"
                "- Daviplata 3004141021\n\n"
                "üì∏ Env√≠a la foto del comprobante aqu√≠."
            )

            print("üß™ MENSAJE A ENVIAR:\n", msg)
            await ctx.bot.send_message(chat_id=cid, text=msg)
            print("‚úÖ MENSAJE ENVIADO (transferencia)")
            return

        else:
            est["fase"] = "esperando_comprobante"
            resumen["Pago"] = "Contra entrega"
            resumen["Valor Anticipo"] = 35000
            estado_usuario[cid] = est

            msg = (
                "üü° Elegiste CONTRAENTREGA.\n"
                "Debes adelantar 35 000 COP para el env√≠o (se descuenta del total).\n\n"
                "üí≥ Cuentas disponibles:\n"
                "- Bancolombia 30300002233 (X100 SAS)\n"
                "- Nequi 3177171171\n"
                "- Daviplata 3004141021\n\n"
                "üì∏ Env√≠a la foto del comprobante aqu√≠."
            )

            print("üí¨ Enviando mensaje:\n", msg)
            await ctx.bot.send_message(chat_id=cid, text=msg)
            return

    # ------------------------------------------------------------------------
    # üì∏ Recibir comprobante de pago
    # ------------------------------------------------------------------------
    if est.get("fase") == "esperando_comprobante" and update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}_proof.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        # OCR con Google Cloud Vision
        with io.open(tmp, "rb") as image_file:
            content = image_file.read()
        image = vision.Image(content=content)
        response = vision_client.text_detection(image=image)
        textos_detectados = response.text_annotations

        texto_extraido = textos_detectados[0].description if textos_detectados else ""
        print("üßæ TEXTO EXTRA√çDO:\n", texto_extraido)

        # Verificaci√≥n b√°sica del comprobante
        if not es_comprobante_valido(texto_extraido):
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ö†Ô∏è El comprobante no parece v√°lido. Aseg√∫rate de que sea legible y que diga 'Pago exitoso' o 'Transferencia realizada'."
            )
            os.remove(tmp)
            return

        # Si es v√°lido, continuar flujo
        resumen = est["resumen"]
        registrar_orden(resumen)

        enviar_correo(
            est["correo"],
            f"Pago recibido {resumen['N√∫mero Venta']}",
            json.dumps(resumen, indent=2)
        )
        enviar_correo_con_adjunto(
            EMAIL_JEFE,
            f"Comprobante {resumen['N√∫mero Venta']}",
            json.dumps(resumen, indent=2),
            tmp
        )

        os.remove(tmp)

        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ ¬°Pago registrado exitosamente! Tu pedido est√° en proceso. üöö"
        )

        reset_estado(cid)
        estado_usuario.pop(cid, None)
        return


    # üöö Rastrear pedido
    if est.get("fase") == "esperando_numero_rastreo":
        await ctx.bot.send_message(
            chat_id=cid,
            text="üì¶ Puedes rastrear tu pedido aqu√≠:\nhttps://www.instagram.com/juanp_ocampo/",
            parse_mode="Markdown"
        )
        reset_estado(cid)
        return

    # üîÑ Solicitud de devoluci√≥n
    if est.get("fase") == "esperando_numero_devolucion":
        est["referencia"] = txt_raw.strip()
        est["fase"] = "esperando_motivo_devolucion"
        await ctx.bot.send_message(
            chat_id=cid,
            text="üìù ¬øCu√°l es el motivo de la devoluci√≥n?",
            parse_mode="Markdown"
        )
        return

    if est.get("fase") == "esperando_motivo_devolucion":
        enviar_correo(
            EMAIL_DEVOLUCIONES,
            f"Solicitud de Devoluci√≥n {NOMBRE_NEGOCIO}",
            f"Venta: {est['referencia']}\nMotivo: {txt_raw}"
        )
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ Solicitud de devoluci√≥n enviada exitosamente.",
            parse_mode="Markdown"
        )
        reset_estado(cid)
        return

    # üéôÔ∏è Procesar audio
    if update.message.voice or update.message.audio:
        fobj = update.message.voice or update.message.audio
        tg_file = await fobj.get_file()
        local_path = os.path.join(TEMP_AUDIO_DIR, f"{cid}_{tg_file.file_id}.ogg")
        await tg_file.download_to_drive(local_path)
        txt_raw = await transcribe_audio(local_path)
        os.remove(local_path)

        if not txt_raw:
            await update.message.reply_text(
                "Ese audio se escucha muy mal üòï. ¬øPodr√≠as enviarlo de nuevo o escribir tu mensaje?",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        txt = normalize(txt_raw)

    # üñºÔ∏è Intenci√≥n global de imagen
    if menciona_imagen(txt):
        if est.get("fase") != "esperando_imagen":
            est["fase"] = "esperando_imagen"
            await update.message.reply_text(CLIP_INSTRUCTIONS, reply_markup=ReplyKeyboardRemove())
        return

    # üí¨ Manejar precio por referencia
    if await manejar_precio(update, ctx, inv):
        return

    # üõí Confirmaci√≥n para continuar con compra despu√©s de ver precios
    if est.get("fase") == "confirmar_compra":
        if txt in ("si", "s√≠", "si quiero comprar", "s√≠ quiero comprar", "quiero comprar", "comprar", "dale", "SI", "De una", "claro"):
            modelo = est.get("modelo_confirmado")
            color_confirmado = est.get("color_confirmado")

            if not modelo:
                await ctx.bot.send_message(
                    chat_id=cid,
                    text="‚ùå No encontr√© el modelo que seleccionaste. Vuelve a escribirlo o env√≠ame una imagen.",
                    parse_mode="Markdown"
                )
                est["fase"] = "inicio"
                estado_usuario[cid] = est
                return

            est["modelo"] = modelo

            colores = obtener_colores_por_modelo(inv, modelo)
            if isinstance(colores, (int, float, str)):
                colores = [str(colores)]

            if len(colores) == 1:
                est["color"] = colores[0]
                est["fase"] = "esperando_talla"
                tallas = obtener_tallas_por_color(inv, modelo, colores[0])
                if isinstance(tallas, (int, float, str)):
                    tallas = [str(tallas)]

                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"Perfecto üéØ ¬øQu√© talla deseas para el modelo *{modelo}* color *{colores[0]}*?\nüëâ Tallas disponibles: {', '.join(tallas)}",
                    parse_mode="Markdown"
                )
            else:
                est["fase"] = "esperando_color"
                colores_str = "\n".join(f"- {c}" for c in colores)
                await ctx.bot.send_message(
                    chat_id=cid,
                    text=f"üé® El modelo *{modelo}* est√° disponible en varios colores:\n\n{colores_str}\n\n¬øCu√°l color te interesa?",
                    parse_mode="Markdown"
                )

            estado_usuario[cid] = est
            return

        else:
            await ctx.bot.send_message(
                chat_id=cid,
                text="No hay problema. Si deseas, puedes ver nuestro cat√°logo completo üìã.\nüëâ https://wa.me/c/573246666652",
                parse_mode="Markdown"
            )
            est["fase"] = "inicio"
            estado_usuario[cid] = est
            return


    # üîÑ Si el usuario dice ‚Äús√≠‚Äù antes de confirmar compra (por fuera del flujo)
    if "s√≠" in txt_raw or "claro" in txt_raw or "dale" in txt_raw or "quiero" in txt_raw:
        modelo = est.get("modelo_confirmado")
        if not modelo:
            await ctx.bot.send_message(
                chat_id=cid,
                text="‚ùå No encontr√© el modelo que seleccionaste. Vuelve a escribirlo o env√≠ame una imagen.",
                parse_mode="Markdown"
            )
            est["fase"] = "inicio"
            return

        colores = obtener_colores_por_modelo(inventario, modelo)

        # Caso √∫nico color
        if len(colores) == 1:
            est["modelo"] = modelo
            est["color"] = colores[0]
            est["fase"] = "esperando_talla"

            tallas = obtener_tallas_por_color(inventario, modelo, colores[0])
            await ctx.bot.send_message(
                chat_id=cid,
                text=f"Perfecto üëå ¬øQu√© talla deseas para el modelo *{modelo}* color *{colores[0]}*? üëüüìè",
                parse_mode="Markdown",
                reply_markup=menu_botones(tallas),
            )
            return

        # Caso m√∫ltiples colores
        est["modelo"] = modelo
        est["fase"] = "esperando_color"

        await ctx.bot.send_message(
            chat_id=cid,
            text=f"üé® ¬øQu√© color deseas para el modelo *{modelo}*?",
            parse_mode="Markdown",
            reply_markup=menu_botones(colores),
        )
        return


    # üîí Video de confianza si desconf√≠a
    if any(frase in txt for frase in (
        "no me fio", "no confio", "es seguro", "como se que no me roban",
        "como se que no me estafan", "desconfio", "no creo", "estafa", "miedo a comprar"
    )):
        VIDEO_DRIVE_ID = "TU_ID_DEL_VIDEO_DE_CONFIANZA"
        video_url = f"https://drive.google.com/uc?id={VIDEO_DRIVE_ID}"

        await ctx.bot.send_chat_action(chat_id=cid, action=ChatAction.UPLOAD_VIDEO)
        await ctx.bot.send_video(
            chat_id=cid,
            video=video_url,
            caption=(
                "üîí Entendemos perfectamente tu preocupaci√≥n. "
                "Aqu√≠ te dejamos un video corto donde nuestros clientes reales comparten su experiencia. "
                "Somos una empresa seria y segura, ¬°puedes confiar en nosotros! üòäüëç"
            )
        )
        return

    # üé¨ Si pide videos normales
    if any(frase in txt for frase in ("videos", "quiero videos", "ver videos")):
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                "üé¨ ¬°Claro! Aqu√≠ tienes videos de nuestras referencias m√°s populares:\n\n"
                "‚Ä¢ DS 277: https://drive.google.com/file/d/1W7nMJ4RRYUvr9LiPDe5p_U6Mg_azyHLN/view?usp=drive_link\n"
                "‚Ä¢ DS 288: https://youtu.be/ID_DEL_VIDEO_288\n"
                "‚Ä¢ DS 299: https://youtu.be/ID_DEL_VIDEO_299\n\n"
                "¬øCu√°l te gustar√≠a ver?"
            ),
            reply_markup=menu_botones(["DS 277", "DS 288", "DS 299"]),
            parse_mode="Markdown"
        )
        est["fase"] = "esperando_video_referencia"
        return

    # üé¨ Esperar selecci√≥n de video
    if est.get("fase") == "esperando_video_referencia":
        await enviar_video_referencia(cid, ctx, txt)
        est["fase"] = "inicio"
        return

    if await manejar_precio(update, ctx, inv):
        return

    if await manejar_catalogo(update, ctx):
        return

    # üñºÔ∏è Procesar imagen subida si estaba esperando
    if est.get("fase") == "esperando_imagen" and update.message.photo:
        f = await update.message.photo[-1].get_file()
        tmp = os.path.join("temp", f"{cid}.jpg")
        os.makedirs("temp", exist_ok=True)
        await f.download_to_drive(tmp)

        ref_detectada = identify_model_from_stream(tmp)
        os.remove(tmp)

        if ref_detectada:
            marca, modelo, color = ref_detectada.split('_')
            est.update({
                "marca": marca,
                "modelo": modelo,
                "color": color,
                "fase": "imagen_detectada"
            })
            await ctx.bot.send_message(
                chat_id=cid,
                text=f"La imagen coincide con {marca} {modelo} color {color}. ¬øContinuamos? (SI/NO)",
                reply_markup=menu_botones(["SI", "NO"]),
            )
        else:
            reset_estado(cid)
            await ctx.bot.send_message(
                chat_id=cid,
                text="üòï No reconoc√≠ el modelo en la imagen. ¬øPuedes intentar otra imagen o escribir /start?",
                parse_mode="Markdown"
            )
        return

    # üõçÔ∏è Detectar marca escrita
    marcas = obtener_marcas_unicas(inv)
    elegida = next((m for m in marcas if any(t in txt for t in normalize(m).split())), None)

    if not elegida:
        tokens = txt.split()
        for m in marcas:
            for tok in normalize(m).split():
                if difflib.get_close_matches(tok, tokens, n=1, cutoff=0.6):
                    elegida = m
                    break
            if elegida:
                break

    if elegida:
        est["marca"] = elegida
        est["fase"] = "esperando_modelo"
        await ctx.bot.send_message(
            chat_id=cid,
            text=f"¬°Genial! Veo que buscas {elegida}. ¬øQu√© modelo de {elegida} te interesa?",
            reply_markup=menu_botones(obtener_modelos_por_marca(inv, elegida)),
        )
        return




     # ‚Äî‚Äî‚Äî Hasta aqu√≠ llega todo el flujo normal del bot ‚Äî‚Äî‚Äî

    # üî• Fallback inteligente CORREGIDO con 4 espacios

    # 1) Detectar palabras t√≠picas primero (antes que IA)
    palabras_clave_flujo = [
        "catalogo", "cat√°logo", "ver cat√°logo", "ver catalogo",
        "imagen", "foto", "enviar imagen", "ver tallas",
        "quiero comprar", "hacer pedido", "comprar", "zapatos", "tenis",
        "pago", "contraentrega", "garant√≠a", "garantia",
        "demora", "env√≠o", "envio"
    ]

    if any(palabra in txt for palabra in palabras_clave_flujo):
        await ctx.bot.send_message(
            chat_id=cid,
            text="üìã Parece que quieres hacer un pedido o consultar el cat√°logo. Usa las opciones disponibles üòâ",
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo", "Enviar imagen"])
        )
        return

    # 2) NO usar IA si estamos en una fase cr√≠tica (proteger cierre de venta)
    fases_criticas = [
        "esperando_talla", "esperando_color", "esperando_nombre", "esperando_correo",
        "esperando_telefono", "esperando_ciudad", "esperando_provincia", "esperando_direccion",
        "esperando_pago", "esperando_comprobante", "imagen_detectada",
        "esperando_video_referencia", "esperando_numero_rastreo",
        "esperando_numero_devolucion", "esperando_motivo_devolucion"
    ]

    if est.get("fase") in fases_criticas:
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úèÔ∏è Por favor completa primero el proceso en el que est√°s. ¬øTe ayudo a terminarlo?",
            reply_markup=menu_botones(["Volver al men√∫"])
        )
        return

    # 3) Ahora s√≠, usar IA si no entendimos nada
    respuesta_fallback = await responder_con_openai(txt_raw)
    if respuesta_fallback:
        await ctx.bot.send_message(
            chat_id=cid,
            text=respuesta_fallback,
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo", "Enviar imagen"])
        )
    else:
        await ctx.bot.send_message(
            chat_id=cid,
            text="üòÖ No logr√© entender tu solicitud. ¬øQuieres ver el cat√°logo o realizar un pedido?",
            reply_markup=menu_botones(["Hacer pedido", "Ver cat√°logo"])
        )
    return

# Funci√≥n para manejar la solicitud de precio por referencia
PALABRAS_PRECIO = ['precio', 'vale', 'cuesta', 'valor', 'coste', 'precios', 'cu√°nto']

async def manejar_precio(update, ctx, inventario):
    import logging
    cid = update.effective_chat.id
    mensaje = (update.message.text or "").lower()
    txt = normalize(mensaje)
    logging.debug(f"[manejar_precio] Mensaje recibido: {mensaje}")

    # Detectar referencia de 3 o 4 d√≠gitos
    m_ref = re.search(r"(?:referencia|modelo)?\s*(\d{3,4})", txt)
    if not m_ref:
        logging.debug("[manejar_precio] No se detect√≥ referencia en el mensaje.")
        return False

    referencia = m_ref.group(1)
    logging.debug(f"[manejar_precio] Referencia detectada: {referencia}")

    # Buscar productos que coincidan
    productos = [
        item for item in inventario
        if referencia in normalize(item.get("modelo", "")) and disponible(item)
    ]
    logging.debug(f"[manejar_precio] Productos encontrados con stock: {len(productos)}")

    if productos:
        from collections import defaultdict
        agrupados = defaultdict(set)

        for item in productos:
            try:
                precio_raw = str(item.get("precio", "0")).replace(".", "").replace("COP", "").strip()
                precio_formateado = f"{int(precio_raw):,}COP"
            except Exception as e:
                logging.error(f"[manejar_precio] Error formateando precio: {e}")
                precio_formateado = "No disponible"

            try:
                key = (
                    item.get("modelo", "desconocido"),
                    item.get("color", "varios colores"),
                    precio_formateado
                )
                agrupados[key].add(str(item.get("talla", "")))
            except Exception as e:
                logging.error(f"[manejar_precio] Error agrupando tallas: {e}")
        
        respuesta_final = ""
        primer_producto = productos[0]

        for (modelo, color, precio), tallas in agrupados.items():
            try:
                if not isinstance(tallas, (set, list, tuple)):
                    tallas = [str(tallas)]

                tallas_ordenadas = sorted(tallas, key=lambda t: int(t) if t.isdigit() else t)
                tallas_str = ", ".join(tallas_ordenadas)

                respuesta_final += (
                    f"üëü *{modelo}* ({color})\n"
                    f"üí≤ Precio: *{precio}*\n"
                    f"Tallas disponibles: {tallas_str}\n\n"
                )
            except Exception as e:
                logging.error(f"[manejar_precio] Error formateando tallas: {e}")

        # ‚úÖ Guardar estado de forma segura
        est = estado_usuario.get(cid, {})
        est["fase"] = "confirmar_compra"
        est["modelo_confirmado"] = primer_producto["modelo"]
        est["color_confirmado"] = primer_producto["color"]
        est["marca"] = primer_producto.get("marca", "sin marca")
        estado_usuario[cid] = est  # ‚úÖ GUARDA el estado correctamente

        logging.debug(f"[manejar_precio] Guardado modelo: {primer_producto['modelo']}, color: {primer_producto['color']}")

        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                f"Veo que est√°s interesado en nuestra referencia *{referencia}*:\n\n"
                f"{respuesta_final}"
                "¬øTe gustar√≠a proseguir con la compra?\n\n"
                "üëâ Escribe: *s√≠ quiero comprar* o *no, gracias*"
            ),
            parse_mode="Markdown"
        )
        return True

    else:
        logging.debug("[manejar_precio] No se encontraron productos con esa referencia.")
        await ctx.bot.send_message(
            chat_id=cid,
            text=(
                f"üòï No encontr√© la referencia {referencia}. "
                "¬øQuieres revisar el cat√°logo?\n\n"
                "üëâ Opciones: Ver cat√°logo / Volver al men√∫"
            ),
            parse_mode="Markdown"
        )
        return True





   
# --------------------------------------------------------------------

nest_asyncio.apply()

# 1. Instancia FastAPI
api = FastAPI(title="AYA Bot ‚Äì WhatsApp")

# 2. Conversi√≥n de n√∫mero WhatsApp
def wa_chat_id(wa_from: str) -> str:
    return re.sub(r"\D", "", wa_from)

async def responder_con_openai(mensaje_usuario):
    openai.api_key = os.getenv("OPENAI_API_KEY")

    try:
        respuesta = await openai.ChatCompletion.acreate(
            model="gpt-4-1106-preview",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Eres un asesor de ventas de la tienda de zapatos deportivos 'X100üî•üëü'. "
                        "Solo vendemos nuestra propia marca *X100* (no manejamos marcas como Skechers, Adidas, Nike, etc.). "
                        "Nuestros productos son 100% colombianos üá®üá¥ y hechos en Bucaramanga.\n\n"
                        "Tu objetivo principal es:\n"
                        "- Ayudar al cliente a consultar el cat√°logo üìã\n"
                        "- Siempre que puedas pedir la referencia del teni\n"
                        "- Pedir que env√≠e una imagen del zapato que busca üì∏\n"
                        "Siempre que puedas, invita amablemente al cliente a enviarte el n√∫mero de referencia o una imagen para agilizar el pedido.\n"
                        "Si el cliente pregunta por marcas externas, responde c√°lidamente explicando que solo manejamos X100.\n\n"
                        "Cuando no entiendas muy bien la intenci√≥n, ofrece opciones como:\n"
                        "- '¬øTe gustar√≠a ver nuestro cat√°logo? üìã'\n"
                        "- '¬øMe puedes enviar la referencia del modelo que te interesa? üìã‚ú®'\n"
                        "- '¬øQuieres enviarme una imagen para ayudarte mejor? üì∏'\n\n"
                        "Responde de forma C√ÅLIDA, POSITIVA, BREVE (m√°ximo 2 o 3 l√≠neas), usando emojis amistosos üéØüëüüöÄ‚ú®.\n"
                        "Act√∫a como un asesor de ventas que siempre busca ayudar al cliente y CERRAR la compra de manera r√°pida, amigable y eficiente."
                    )
                },
                {
                    "role": "user",
                    "content": mensaje_usuario
                }
            ],
            temperature=0.5,
            max_tokens=300
        )
        return respuesta['choices'][0]['message']['content']
    except Exception as e:
        print(f"Error al consultar OpenAI: {e}")
        return "Disculpa, estamos teniendo un inconveniente en este momento. ¬øPuedes intentar de nuevo m√°s tarde?"


# 4. Procesar mensaje de WhatsApp
async def procesar_wa(cid: str, body: str) -> dict:
    cid = str(cid)  # üîê Asegura que el ID sea string SIEMPRE
    texto = body.lower() if body else ""
    txt = texto if texto else ""

    class DummyCtx(SimpleNamespace):
        async def bot_send(self, chat_id, text, **kw): self.resp.append(text)
        async def bot_send_chat_action(self, chat_id, action, **kw): pass
        async def bot_send_video(self, chat_id, video, caption=None, **kw): self.resp.append(f"[VIDEO] {caption or ' '}]")

    # üëá Define ctx primero
    ctx = DummyCtx(resp=[])

    # üëá Ahora s√≠ define ctx.bot correctamente
    ctx.bot = SimpleNamespace(
        send_message=ctx.bot_send,
        send_chat_action=ctx.bot_send_chat_action,
        send_video=ctx.bot_send_video
    )

    class DummyMsg(SimpleNamespace):
        def __init__(self, text, ctx, photo=None, voice=None, audio=None):
            self.text = text
            self.photo = photo
            self.voice = voice
            self.audio = audio
            self._ctx = ctx

        async def reply_text(self, text, **kw):
            self._ctx.resp.append(text)

    dummy_msg = DummyMsg(text=body, ctx=ctx, photo=None, voice=None, audio=None)
    dummy_update = SimpleNamespace(
        message=dummy_msg,
        effective_chat=SimpleNamespace(id=cid)
    )

    # üß† Revisa si el estado no existe o est√° vac√≠o
    if cid not in estado_usuario or not estado_usuario[cid].get("fase"):
        reset_estado(cid)
        estado_usuario[cid] = {"fase": "inicio"}

    try:
        await responder(dummy_update, ctx)

        if ctx.resp:
            print(f"[DEBUG] BOT respondi√≥ correctamente: {ctx.resp}")
            return {"type": "text", "text": "\n".join(ctx.resp)}
        else:
            est = estado_usuario.get(cid, {})
            if est.get("fase") in ("esperando_pago", "esperando_comprobante"):
                print("[DEBUG] Fase cr√≠tica: el bot no respondi√≥ pero no se usar√° IA.")
                return {"type": "text", "text": "üí¨ Estoy esperando que confirmes tu m√©todo de pago o me env√≠es el comprobante. üì∏"}

            print(f"[DEBUG] BOT no respondi√≥ nada, se usar√° IA para el mensaje: {body}")
            respuesta_ia = await responder_con_openai(body)
            return {"type": "text", "text": respuesta_ia}

    except Exception as e:
        print(f"üî• Error interno en procesar_wa(): {e}")
        print(f"[DEBUG] Usando IA como fallback por error de bot en mensaje: {body}")
        respuesta_ia = await responder_con_openai(body)
        return {"type": "text", "text": respuesta_ia}
@api.post("/venom")
async def venom_webhook(req: Request):
    try:
        # 1Ô∏è‚É£ Leer JSON
        data = await req.json()
        cid      = wa_chat_id(data.get("from", ""))
        body     = data.get("body", "") or ""
        mtype    = (data.get("type") or "").lower()
        mimetype = (data.get("mimetype") or "").lower()

        logging.info(f"üì© Mensaje recibido ‚Äî CID: {cid} ‚Äî Tipo: {mtype} ‚Äî MIME: {mimetype}")

        # 2Ô∏è‚É£ Procesar texto
        if mtype == "chat":
            fase_actual = estado_usuario.get(cid, {}).get("fase", "")
            logging.info(f"üí¨ Texto recibido en fase: {fase_actual or 'NO DEFINIDA'}")
            reply = await procesar_wa(cid, body)
            return JSONResponse(reply)

        # 3Ô∏è‚É£ Procesar imagen
        elif mtype == "image" or mimetype.startswith("image"):
            try:
                logging.info("üñºÔ∏è Imagen recibida. Decodificando base64...")
                b64_str = body.split(",", 1)[1] if "," in body else body
                img_bytes = base64.b64decode(b64_str + "===")
                os.makedirs("temp", exist_ok=True)
                path_local = f"temp/{cid}_img.jpg"
                with open(path_local, "wb") as f:
                    f.write(img_bytes)
                logging.info(f"‚úÖ Imagen guardada temporalmente en {path_local}")
            except Exception as e:
                logging.error(f"‚ùå Error al guardar imagen base64: {e}")
                return JSONResponse({"type": "text", "text": "‚ùå No pude leer la imagen üòï"})

            est = estado_usuario.get(cid, {})
            fase = est.get("fase", "")
            logging.info(f"üîç Fase actual del usuario {cid}: {fase or 'NO DEFINIDA'}")

            # 4Ô∏è‚É£ Si espera comprobante
            if fase == "esperando_comprobante":
                logging.info("üßæ Fase: esperando_comprobante ‚Äî Ejecutando OCR")
                texto = extraer_texto_comprobante(path_local)
                logging.info(f"üìÉ Texto OCR:\n{texto[:300]}")

                if es_comprobante_valido(texto):
                    logging.info("‚úÖ OCR v√°lido. Se registra orden.")
                    resumen = est.get("resumen", {})
                    registrar_orden(resumen)

                    enviar_correo(
                        est["correo"],
                        f"Pago recibido {resumen.get('N√∫mero Venta')}",
                        json.dumps(resumen, indent=2)
                    )
                    enviar_correo_con_adjunto(
                        EMAIL_JEFE,
                        f"Comprobante {resumen.get('N√∫mero Venta')}",
                        json.dumps(resumen, indent=2),
                        path_local
                    )
                    os.remove(path_local)
                    reset_estado(cid)
                    return JSONResponse({"type": "text", "text": "‚úÖ Comprobante verificado. Tu pedido est√° en proceso. üöö"})
                else:
                    logging.warning("‚ö†Ô∏è OCR no v√°lido. No se reconoci√≥ 'Pago exitoso'.")
                    os.remove(path_local)
                    return JSONResponse({"type": "text", "text": "‚ö†Ô∏è No pude verificar el comprobante. Aseg√∫rate que diga 'Pago exitoso' o 'Transferencia exitosa'."})

            # 5Ô∏è‚É£ Si no est√° esperando comprobante
            logging.info("üì∏ Fase no es 'esperando_comprobante'. Intentando reconocimiento por hash.")
            try:
                img = Image.open(path_local)
                h_in = str(imagehash.phash(img))
                ref = MODEL_HASHES.get(h_in)
                logging.info(f"üß† Hash de imagen: {h_in} ‚Üí Resultado: {ref}")
            except Exception as e:
                logging.error(f"‚ùå Error al calcular hash de imagen: {e}")
                return JSONResponse({"type": "text", "text": "üòï No pude procesar la imagen."})

            if ref:
                marca, modelo, color = ref
                logging.info(f"üéØ Imagen reconocida como {marca} {modelo} {color}")
                estado_usuario.setdefault(cid, reset_estado(cid))
                estado_usuario[cid].update(
                    fase="imagen_detectada", marca=marca, modelo=modelo, color=color
                )
                os.remove(path_local)
                return JSONResponse({
                    "type": "text",
                    "text": f"La imagen coincide con {marca} {modelo} color {color}. ¬øDeseas continuar tu compra? (SI/NO)"
                })
            else:
                logging.warning("üö´ Imagen no reconocida. Se reinicia estado.")
                os.remove(path_local)
                reset_estado(cid)
                return JSONResponse({"type": "text", "text": "üòï No reconoc√≠ el modelo. Puedes intentarlo con otra imagen."})

        # 6Ô∏è‚É£ Mensaje no manejado
        logging.warning(f"ü§∑‚Äç‚ôÇÔ∏è Tipo de mensaje no manejado: {mtype}")
        return JSONResponse({
            "type": "text",
            "text": f"‚ö†Ô∏è Tipo de mensaje no manejado: {mtype}"
        })

    except Exception as e:
        logging.exception("üî• Error general en venom_webhook")
        return JSONResponse(
            {"type": "text", "text": "‚ö†Ô∏è Error interno procesando el mensaje."},
            status_code=500
        )
# -------------------------------------------------------------------------
# 5. Arranque del servidor
# -------------------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn, os
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(api, host="0.0.0.0", port=port)


